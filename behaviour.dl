/* vim: set syntax=prolog : */

/* Behaviour

mayCall(type, targetObjectVar, argumentVar, resultVar)  : resultVar = targetVar.do(argumentVar);
mayAccept(type, varName)				: public Object do(Object varName) { ... }
mayReturn(type, varName)				: return varName;

*/




/* Unknown */
hasField("Unknown", "ref").
mayCall("Unknown", "ref", "ref", "ref").
mayAccept("Unknown", "ref").
mayReturn("Unknown", "ref").

/* Factory */
hasLocal("Factory", "task").
mayCreate("Factory", "Task", "task").	/* Task task = new Task(); */
mayReturn("Factory", "task").		/* return task; */

isA(?X, "Unknown") :- isA(?X, "Task").	/* class Task extends Unknown {} */
