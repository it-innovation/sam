/* vim: set syntax=prolog : */


/* The concrete objects that may be called, based on the behaviour (in terms of variables) and the values of those variables. */
mayCallObject(?CallerInvocation, ?TargetValue, ?ArgValue, ?ResultVar) :-
	invocationType(?CallerInvocation, ?Type),
	mayCall(?Type, ?TargetVar, ?ArgVar, ?ResultVar),
	value(?CallerInvocation, ?TargetVar, ?TargetValue),
	value(?CallerInvocation, ?ArgVar, ?ArgValue).

/* Assume caller did a call if caller might do "Object resultVar = targetObject.do(argValue)" */
didCall(?CallerInvocation, ?TargetInvocation, ?ArgValue, ?ResultVar) :-
	mayCallObject(?CallerInvocation, ?TargetObject, ?ArgValue, ?ResultVar),
	realInvocationObject(?CallerInvocation, ?TargetObject, ?TargetInvocation).

/* If Caller may call target and may accept a return value and target may return a value then Caller's var may now be the returned value. */
didGet(?CallerInvocation, ?ResultVar, ?ResultValue) :-
	didCall(?CallerInvocation, ?TargetInvocation, ?ArgValue, ?ResultVar),
	invocationType(?TargetInvocation, ?TargetType),
	mayReturn(?TargetType, ?TargetResultVar),
	value(?TargetInvocation, ?TargetResultVar, ?ResultValue).

/* The caller may store the result of any call. */
local(?CallerInvocation, ?ResultVar, ?ResultValue) :-
	didGet(?CallerInvocation, ?ResultVar, ?ResultValue),
	invocationType(?CallerInvocation, ?Type),
	hasLocal(?Type, ?ResultValue).
field(?CallerObject, ?ResultVar, ?ResultValue) :-
	didGet(?CallerInvocation, ?ResultVar, ?ResultValue),
	hasInvocation(?CallerObject, ?CallerInvocation),
	isA(?CallerObject, ?Type),
	hasField(?Type, ?ResultVar).

/* Target's parameter variable may contain ArgValue if someone called it with that value. */
local(?TargetInvocation, ?ParamVar, ?ArgValue) :-
	didCall(?AnyInvocation, ?TargetInvocation, ?ArgValue, ?ResultVar),
	invocationType(?TargetInvocation, ?TargetType),
	mayAccept(?TargetType, ?ParamVar).

didCreate(?Invocation, ?Var, ?ChildType) :-
	invocationType(?Invocation, ?Type),
	mayCreate(?Type, ?ChildType, ?Var).

local(?Invocation, ?Var, ?NewChild) :-
	didCreate(?Invocation, ?Var, ?ChildType),
	newObject(?Invocation, ?ChildType, ?NewChild).


/* Sanity checking */


error("No target invocation for possible call", ?CallerInvocation, ?TargetObject) :-
	mayCallObject(?CallerInvocation, ?TargetObject, ?ArgValue, ?ResultVar),
	!realInvocationObject(?CallerInvocation, ?TargetObject, ?TargetInvocation).

error("No child object specified for new", ?Invocation, ?ChildType) :-
	didCreate(?Invocation, ?Var, ?ChildType),
	!newObject(?Invocation, ?ChildType, ?NewChild).
