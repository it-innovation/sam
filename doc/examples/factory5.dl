/* vim: set syntax=prolog : */

/* Behaviour */
class Factory {
  public Task newInstance() {
    Task task = new Task();
    return task;
  }
}

class Task extends Unknown {
}

class ClientA {
  private Object factory;
  private Object myTask;
  private Object ref;

  public void run() {
    myTask = factory.newInstance();
    ref = ref.invoke(ref);
  }
}

/* Config */

initialObject("clientA", "ClientA").
initialObject("otherClients", "Unknown").
initialObject("factory", "Factory").

field("clientA", "factory", "factory").
field("otherClients", "ref", "factory").

initialInvocation("clientA", "Other").
initialInvocation("otherClients", "Other").

field("clientA", "ref", "otherClients").

invocationObject("clientA", "Other", "ClientA.run-1", "A").

/* Goals */

denyAccess("otherClients", "TaskA").
requireAccess("clientA", "TaskA").

error("otherClient may access some clientA.myTask") :-
	getsAccess("otherClients", ?Value),
	field("clientA", "myTask", ?Value).

/* Graphing */

showInvocation("factory", ?Invocation) :- isInvocation(?Invocation).
