/* vim: set syntax=prolog : */

class Task {}

class Factory {
  public Task newInstance() {
    Task task = new Task();
    return task;
  }
}


/* Config */

initialObject("clientA", "Unknown").
initialObject("otherClients", "Unknown").
initialObject("factory", "Factory").

field("clientA", "ref", "factory").
field("otherClients", "ref", "factory").


initialInvocation("clientA", "A").
initialInvocation("otherClients", "other").


/* Aggregation */

newObject("factory", "A", "Task", "newTasksForA").
newObject("factory", "other", "Task", "newTasksOthers").



/* Graphing */

showInvocation("factory", ?Invocation) :- live("factory", ?Invocation).


/* Goals */

denyAccess("otherClients", "newTasksForA").
requireAccess("clientA", "newTasksForA").
