/* Imports */

import "includes/sealers-common.sam".

class Sender {
  private Sealer mySealer;
  private Box myBox1;
  private Box myBox2;

  public Sender(Sealer sealer) {
    mySealer = sealer;
  }

  public void setup1() {
    Object precious = new Precious();
    myBox1 = mySealer.seal(precious);
  }

  public void setup2() {
    Object precious = new Precious();
    myBox2 = mySealer.seal(precious);
  }

  public void test1(Object target) {
    target.accept(myBox1);
  }

  public void test2(Object target) {
    target.accept(myBox2);
  }
}

config {
  Object sealer;
  Object unsealer;
  Object withUnsealer1;
  Object withUnsealer2;
  Object sender;

  setup {
    sealer = new Sealer();
    unsealer = sealer.getUnsealer();
    sender = new Sender(sealer);
  }

  setup "1" {
    sender.setup1();
    withUnsealer1 = new Unknown(unsealer);
  }

  setup "2" {
    sender.setup2();
    withUnsealer2 = new Unknown(unsealer);
  }

  test "1" {
    sender.test1(withUnsealer1);
  }

  test "2" {
    sender.test2(withUnsealer2);
  }
}


//showAllInvocations(<unsealer>).

/* Goals */

requireAccess(<withUnsealer1>, <precious1>).
requireAccess(<withUnsealer2>, <precious2>).
denyAccess(<withUnsealer1>, <precious2>).
denyAccess(<withUnsealer2>, <precious1>).
