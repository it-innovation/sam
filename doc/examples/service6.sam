import "includes/service6mustCall.sam".
import "includes/rbacTabs.sam".

// model a non-capability system:
accessControlOn.
hideUncalledReferences.
isPublic(?X) :- isRef(?X).   // anyone can get a reference to any object

class DataProvider {
  @PermittedRole("world")
  public File newFile(Identity owner) {
    File file = new File(owner);
    return file;
  }
}

class File {
  private Identity myOwner;
  private Identity myReader;

  public File(Identity owner) {
    myOwner = owner;
  }

  @PermittedRole("owner")
  @PermittedRole("reader")
  public void get() {}

  @PermittedRole("owner")
  public void put() {}

  @PermittedRole("owner")
  public void grantReadAccess(Identity id) {
    myReader = id;
  }

  @PermittedRole("owner")
  @PermittedRole("reader")
  public boolean checkCanRead(Identity id) {
    boolean verified = true :- grantsRole(this, ?Role, id), PermittedRole("File.get", ?Role);
    return verified;
  }
}

class ServiceProvider {
    @PermittedRole("world")
    public File process(File uncheckedFile) {
        File image = new File("serviceProvider.crt");

        Identity caller = ?Identity :- hasIdentity($Caller, ?Identity);
        boolean checkResult = uncheckedFile.checkCanRead(caller);

        File file = uncheckedFile :- mayReturn(uncheckedFile, $Context, "File.checkCanRead", true);
        file.get();
        image.grantReadAccess(caller);
        image.put();
        return image;
    }
}

class Client {
  private DataProvider myDataProvider;
  private ServiceProvider myServiceProvider;

  public Client(DataProvider dataProvider, ServiceProvider serviceProvider) {
    myDataProvider = dataProvider;
    myServiceProvider = serviceProvider;
  }

  public void test() {
    File file = myDataProvider.newFile("user.crt");
    file.put();
    Identity serviceIdentity = ?Cert :- hasIdentity(myServiceProvider, ?Cert);
    file.grantReadAccess(serviceIdentity);
    File result = myServiceProvider.process(file);
    result.get();
  }
}

config {
    Client user;
    Unknown otherUsers;
    DataProvider dataProvider;
    ServiceProvider serviceProvider;

    test {
        dataProvider = new DataProvider();
        serviceProvider = new ServiceProvider();

        user = new Client(dataProvider, serviceProvider);
        user.test();
    }

    test "Others" {
        otherUsers = new Unknown(dataProvider);
        otherUsers.test();
    }
}


hasIdentity(<user>, "user.crt").
hasIdentity(<otherUsers>, "otherUsers.crt").
hasIdentity(<dataProvider>, "dataProvider.crt").
hasIdentity(<serviceProvider>, "serviceProvider.crt").

grantsRole(<dataProvider>, "world", ?Identity) :- hasIdentity(?AnyObject, ?Identity).
grantsRole(<serviceProvider>, "world", ?Identity) :- hasIdentity(?AnyObject, ?Identity).
grantsRole(?File, "owner", ?Identity) :- field(?File, "myOwner", ?Identity), IS_STRING(?Identity).
grantsRole(?File, "reader", ?Identity) :- field(?File, "myReader", ?Identity), IS_STRING(?Identity).

ignoreEdgeForRanking(?Source, ?Target) :- isRef(?Source), isA(?Target, "Unknown").
