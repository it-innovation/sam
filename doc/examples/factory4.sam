/* Behaviour */
class Factory {
  public Task newInstance() {
    Task task = new Task();
    return task;
  }
}

class Task extends Unknown {
}

class ClientA {
  private Object myFactory;
  private Object myTask;
  private Object myOtherRefs;

  public ClientA(Object factory, Object otherRefs) {
    myFactory = factory;
    myOtherRefs = otherRefs;
  }

  public void run() {
    myTask = myFactory.newInstance();
    myTask = myTask.invoke(myTask);
    myOtherRefs.invoke(myOtherRefs);
  }
}

config {
    Factory factory;
    Object otherClients;

    setup {
        factory = new Factory();
    }

    test "A" {
        Object clientA = new ClientA(factory, otherClients);
        clientA.run();
    }

    test "Other" {
        otherClients = new Unknown(factory);
    }
}

/* Goals */

denyAccess("otherClients", "taskA").
requireAccess("clientA", "taskA").

/* Graphing */

showAllInvocations("factory").


expectFailure.
