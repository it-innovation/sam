/* Imports */

import "sealers-common.sam".

class Sender {
  private Sealer mySealer;
  private Box myBox;

  public Sender(Sealer sealer) {
    mySealer = sealer;
    Object precious = new Precious();
    myBox = sealer.seal(precious);
  }

  public void test(Object a, Object b) {
    a.accept(myBox);
    b.accept(myBox);
  }
}

config {
  Object withUnsealer;
  Object withoutUnsealer;
  Object sender;

  setup {
    Object sealer = new Sealer();
    Object unsealer = sealer.getUnsealer();

    sender = new Sender(sealer);
    withUnsealer = new Unknown(unsealer);
    withoutUnsealer = new Unknown();
  }

  test {
    sender.test(withUnsealer, withoutUnsealer);
  }
}


/* Goals */

denyAccess("withUnsealer", "withoutUnsealer").
denyAccess("withoutUnsealer", "withUnsealer").
denyAccess("withoutUnsealer", "unsealer").
denyAccess("withoutUnsealer", "precious").
requireAccess("withUnsealer", "precious").
