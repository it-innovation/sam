/* vim: set syntax=prolog : */

/* Imports */

import("initial", "sam:base.dl").
import("initial", "sam:graph.dl").
import("final", "sam:system.dl").

/* Behaviour */
class Factory {
  public Task newInstance() {
    Task task = new Task();
    return task;
  }
}

class Task extends Unknown {
}

class ClientA {
  private Object factory;
  private Object myTask;
  private Object ref;

  public void run() {
    myTask = factory.newInstance();
    myTask = myTask.invoke(myTask);
  }
}

/* Config */

initialObject("clientA", "ClientA").
initialObject("otherClients", "Unknown").
initialObject("factory", "Factory").

field("clientA", "factory", "factory").
field("otherClients", "ref", "factory").

initialInvocation("clientA", "A").
initialInvocation("otherClients", "Other").

field("clientA", "ref", "otherClients").

/* Goals */

denyAccess('otherClients', 'TaskA').
requireAccess('clientA', 'TaskA').
