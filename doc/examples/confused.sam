// The access control policy:
accessControlOn.
accessAllowed("alice", "compiler").
accessAllowed("compiler", "billing").
accessAllowed("compiler", "output").

class Compiler {
    private Object myLog;

    public Compiler(File log) {
        myLog = log;
    }

    public void exec(Object target) {
        myLog.append();
        target.write();
    }
}

class File {
    public void write() {
    }

    public void append() {
    }
}

config {
    File billing;
    Compiler compiler;
    File output;
    Unknown alice;

    setup {
        billing = new File();
        compiler = new Compiler(billing);
        output = new File();
        alice = new Unknown(compiler, output);
    }

    test {
        alice.test();
    }
}

field(?X, "ref", ?Y) :- isA(?X, "Unknown"), isObject(?Y), ?Y != "_testDriver".

missingGoodAccess("compiler", "billing") :-
    !didCall("compiler", ?X, ?CallSite, "billing", ?Y, "File.append").

// Flag an error if an interaction caused by alice (but not involving alice)
// happens that isn't in desiredAuthority.
declare desiredAuthority(?Source, ?Target, ?Method).
haveBadAccess(?Caller, ?Target) :-
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
    ?Caller != "alice", ?Target != "alice",
    !desiredAuthority(?Caller, ?Target, ?Method).

// The only things that should be able to happen which don't involve Alice are:
// 1. compiler invokes output.write()
// 2. compiler invokes billing.append()
desiredAuthority("compiler", "output", "File.write").
desiredAuthority("compiler", "billing", "File.append").


expectFailure.
