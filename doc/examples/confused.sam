#declare scenario attack

// The access control policy:
accessControlOn.
accessAllowed(<alice>, <compiler>).
accessAllowed(<alice>, <input>).
accessAllowed(<alice>, <output>).
accessAllowed(<compiler>, <billing>, "File.write").
accessAllowed(<compiler>, <output>, "File.write").
accessAllowed(<compiler>, <input>, "File.read").

// All objects have well-known or guessable addresses.
isPublic(?X) :- isRef(?X).

class Compiler {
    private Object myLog;

    public Compiler(Ref log) {
        myLog = log;
    }

    public void exec(Ref input, Ref output) {
        input.read();
        myLog.write();
        output.write();
    }
}

class File {
    public void read() { }
    public void write() { }
}

config {
    test {
        Ref billing = new File();
        Ref compiler = new Compiler(billing);
        Ref input = new File();
        Ref output = new File();

#if baseline
        Ref alice = new Alice();
#else
        Ref alice = new Unknown();
#endif

        alice.test(compiler, input, output);
    }
}

class Alice {
    public void test(Ref compiler, Ref input, Ref output) {
        input.write();
        compiler.exec(input, output);
        output.read();
    }
}

// We (the compiler provider) don't care about attacks on the user's objects
mayCall(<input>).
mayCall(<output>).
mayCall(<alice>).

expectFailure :- attack.

// Just makes the graph look nicer.
ignoreEdgeForRanking("compiler", "alice").
