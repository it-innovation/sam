import "includes/service6mustCall.sam".

// model a non-capability system:
accessControlOn.
hideUncalledReferences.
isPublic(?X) :- isObject(?X).   // anyone can get a reference to any object

class DataProvider {
  @PermittedRole("world")
  public File newFile(Identity owner) {
    File file = new File(owner);
    return file;
  }
}

class File {
  private Identity myOwner;
  private Identity myReader;

  public File(Identity owner) {
    myOwner = owner;
  }

  @PermittedRole("owner")
  @PermittedRole("reader")
  public void get() {}

  @PermittedRole("owner")
  public void put() {}

  @PermittedRole("owner")
  public void grantReadAccess(Identity id) {
    myReader = id;
  }

  @PermittedRole("owner")
  @PermittedRole("reader")
  public File checkCanRead(Identity id) {
    File verified = true :- grantsRole(this, ?Role, id), PermittedRole("File.get", ?Role);
    return verified;
  }
}

class ServiceProvider {
    @PermittedRole("world")
    public Image process(File uncheckedFile) {
        Image image = new File("serviceProvider.crt");

        Identity caller = ?Identity :- hasIdentity($Caller, ?Identity);
        File checkResult = uncheckedFile.checkCanRead(caller);

        File file = uncheckedFile :- mayReturn(uncheckedFile, $Context, "File.checkCanRead", true);
        file.get();
        image.grantReadAccess(caller);
        image.put();
        return image;
    }
}

class Client {
  public void test(DataProvider dataProvider, ServiceProvider serviceProvider) {
    File file = dataProvider.newFile("user.crt");
    file.put();
    Identity serviceIdentity = ?Cert :- hasIdentity(serviceProvider, ?Cert);
    file.grantReadAccess(serviceIdentity);
    Image result = serviceProvider.process(file);
    result.get();
  }
}

config {
    Client user;
    Unknown others;
    DataProvider dataProvider;
    ServiceProvider serviceProvider;

    test {
        dataProvider = new DataProvider();
        serviceProvider = new ServiceProvider();

        user = new Client();
        user.test(dataProvider, serviceProvider);
    }

    test "Others" {
        others = new Unknown(dataProvider);
        others.test();
        user.test(others, others);
    }
}


hasIdentity("user", "user.crt").
hasIdentity("others", "others.crt").
hasIdentity("dataProvider", "dataProvider.crt").
hasIdentity("serviceProvider", "serviceProvider.crt").

grantsRole("dataProvider", "world", ?Object) :- isObject(?Object).
grantsRole("serviceProvider", "world", ?Object) :- isObject(?Object).
grantsRole(?File, "owner", ?Identity) :- field(?File, "myOwner", ?Identity).
grantsRole(?File, "reader", ?Identity) :- field(?File, "myReader", ?Identity).

ignoreEdgeForRanking(?Source, ?Target) :- isObject(?Source), isA(?Target, "Unknown").

expectFailure.
