import "includes/data3MustCall.sam".
import "includes/rbacTabs.sam".

// model a non-capability system:
accessControlOn.
hideUncalledReferences.
isPublic(?X) :- isRef(?X).   // anyone can get a reference to any object

class DataProvider {
  @PermittedRole("world")
  public File newFile(String owner) {
    Ref file = new File(owner);
    return file;
  }
}

class File {
  private String myOwner;

  public File(String owner) {
    myOwner = owner;
  }

  @PermittedRole("owner")
  public void get() {}

  @PermittedRole("owner")
  public void put() {}
}

class Client {
  private Ref myDataProvider;

  public Client(Ref dataProvider) {
    myDataProvider = dataProvider;
  }

  public void test() {
    Ref file = myDataProvider.newFile("user.crt");
    file.put();
    file.get();
  }
}

config {
    Client user;
    Client otherUsers;
    Ref dataProvider;

    test {
        dataProvider = new DataProvider();

        user = new Client(dataProvider);
        user.test();
    }

    test "Others" {
        otherUsers = new Unknown(dataProvider);
        otherUsers.test();
    }
}


hasIdentity(<user>, "user.crt").
hasIdentity(<otherUsers>, "otherUsers.crt").
hasIdentity(<dataProvider>, "provider.crt").

grantsRole(<dataProvider>, "world", ?Identity) :- hasIdentity(?AnyObject, ?Identity).
grantsRole(?File, "owner", ?Identity) :- field(?File, "myOwner", ?Value), ASSIGN("String", ?Value, ?Identity).
