/* Behaviour */
class Factory {
  public Task newInstance() {
    Task task = new Task();
    return task;
  }
}

class ClientA {
  private Object myFactory;
  private Object myTask;
  private Object myOtherRefs;

  public ClientA(Object factory, Object otherRefs) {
    myFactory = factory;
    myOtherRefs = otherRefs;
  }

  public void run() {
    myTask = myFactory.newInstance();
    myTask = myTask.invoke(myTask);
    myOtherRefs = myOtherRefs.invoke(myOtherRefs);
  }
}

config {
    Factory factory;

    setup {
        factory = new Factory();
    }

    test "Other" {
        Object otherClients = new Unknown(factory);
        Object clientA = new ClientA(factory, otherClients);
        clientA.run();
    }
}

invocationObject("clientA", "Other", "ClientA.run-1", "A").

/* Goals */

denyAccess("otherClients", "taskA").
requireAccess("clientA", "taskA").

error("otherClient may access some clientA.myTask") :-
	getsAccess("otherClients", ?Value),
	field("clientA", "myTask", ?Value).

/* Graphing */

showAllInvocations("factory").
