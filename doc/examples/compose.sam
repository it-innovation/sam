class ReadOnly {
    private Object myUnderlying;

    public ReadOnly(Object underlying) {
        myUnderlying = underlying;
    }

    public Object read() {
        Object value = myUnderlying.read();
        return value;
    }

    public Object readOnly() {
        return this;    // Already read-only
    }
}

class Logger {
    private Object myUnderlying;

    public Logger(Object underlying) {
        myUnderlying = underlying;
    }

    public Object *(Object arg*) {
        Object value = myUnderlying.*(arg*);
        return value;
    }
}

class File {
    public void write() { }

    public Object read() { }

    public Object readOnly() {
        ReadOnly readOnly = new ReadOnly(this);
        return readOnly;
    }
}

config {
    Logger loggedReadOnly;

    setup {
        File file = new File();
        ReadOnly readOnly = file.readOnly();
        loggedReadOnly = new Logger(readOnly);
    }

    test {
        Unknown delegate = new Unknown(loggedReadOnly);
    }
}

assert didCall(?X, <file>, "File.read").
assert !didCall(?X, <file>, "File.write").

assert !getsAccess(<delegate>, <file>).
assert !getsAccess(<delegate>, <readOnly>).

expectFailure.
