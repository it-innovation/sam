import "includes/service1mustCall.sam".
import "includes/rbacTabs.sam".

// model a non-capability system:
accessControlOn.
hideUncalledReferences.
isPublic(?X) :- isRef(?X).   // anyone can get a reference to any object

class DataProvider {
  @PermittedRole("world")
  public File newFile(String owner) {
    Ref file = new File(owner);
    return file;
  }
}

class File {
  private String myOwner;

  public File(String owner) {
    myOwner = owner;
  }

  @PermittedRole("owner")
  public void get() {}

  @PermittedRole("owner")
  public void put() {}
}

class ServiceProvider {
    @PermittedRole("world")
    public File process(Ref file) {
        Ref image = new File("serviceProvider.crt");
        file.get();
        image.put();
        return image;
    }
}

class Client {
  private Ref myDataProvider;
  private Ref myServiceProvider;

  public Client(Ref dataProvider, Ref serviceProvider) {
    myDataProvider = dataProvider;
    myServiceProvider = serviceProvider;
  }

  public void test() {
    Ref file = myDataProvider.newFile("user.crt");
    file.put();
    Ref result = myServiceProvider.process(file);
    result.get();
  }
}

config {
    Client user;
    Ref dataProvider;
    Ref serviceProvider;

    test {
        dataProvider = new DataProvider();
        serviceProvider = new ServiceProvider();

        user = new Client(dataProvider, serviceProvider);
        user.test();
    }
}


hasIdentity(<user>, "user.crt").
hasIdentity(<dataProvider>, "dataProvider.crt").
hasIdentity(<serviceProvider>, "serviceProvider.crt").

grantsRole(<dataProvider>, "world", ?Identity) :- hasIdentity(?AnyObject, ?Identity).
grantsRole(<serviceProvider>, "world", ?Identity) :- hasIdentity(?AnyObject, ?Identity).
grantsRole(?File, "owner", ?Identity) :- field(?File, "myOwner", ?Value), ASSIGN("String", ?Value, ?Identity).

expectFailure.
