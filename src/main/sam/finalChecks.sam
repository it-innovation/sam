/////////////////////////////////////////////////////////////////////////
//
// Â© University of Southampton IT Innovation Centre, 2011
//
// Copyright in this library belongs to the University of Southampton
// University Road, Highfield, Southampton, UK, SO17 1BJ
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
//	Created By :			Thomas Leonard
//	Created Date :			2011-08-09
//	Created for Project :		SERSCIS
//
/////////////////////////////////////////////////////////////////////////
//
//  License : GNU Lesser General Public License, version 2.1
//
/////////////////////////////////////////////////////////////////////////

/* Sanity checking */

error("Unknown source object in deny rule", ?A) :- denyAccess(?A, ?B), !isRef(?A).
error("Unknown target object in deny rule", ?B) :- denyAccess(?A, ?B), !isRef(?B).


/* Goal checking (here because we only check after applying the system rules) */

missingGoodAccess(?SourceObject, ?TargetObject) :-
	requireAccess(?SourceObject, ?TargetObject),
	!getsAccess(?SourceObject, ?TargetObject).

error("required access is not possible", ?SourceObject, ?TargetObject) :-
	missingGoodAccess(?SourceObject, ?TargetObject).

error(?Msg) :- failedAssertion(?N), assertionMessage(?N, ?Msg).

/* Check that all mustCall calls were made. */

declare missingMustCall(Ref source, Ref target, String method).

// Known objects must call from the correct call-site
missingMustCall(?Source, ?Target, ?Method) :-
    mustCall(?Source, ?SourceInvocation, ?CallSite, ?Target, ?Method),
    !isA(?Source, "Unknown"),
    !didCall(?Source, ?SourceInvocation, ?CallSite, ?Target, ?AnyInvocation, ?Method).

// Unknown objects may call from any call-site
missingMustCall(?Source, ?Target, ?Method) :-
    mustCall(?Source, ?SourceInvocation, ?CallSite, ?Target, ?Method),
    isA(?Source, "Unknown"),
    !didCall(?Source, ?SourceInvocation, ?AnyCallSite, ?Target, ?AnyInvocation, ?Method).

missingGoodAccess(?Source, ?Target) :-
    missingMustCall(?Source, ?Target, ?Method).

error("Not an object", ?Target) :-
    grantsRole(?Target, ?Role, ?CallerIdentity),
    !isRef(?Target).

/* Check that no calls were made on checkCalls objects except for mayCall ones. */

mayCall(?Caller, ?Invocation, ?CallSite, ?Target, ?Method) :-
	mustCall(?Caller, ?Invocation, ?CallSite, ?Target, ?Method).

/* Don't check the call-site for Unknown callers */
mayCall(?Caller, ?Invocation, ?Target, ?Method) :-
	mustCall(?Caller, ?Invocation, ?AnyCallSite, ?Target, ?Method),
	isA(?Caller, "Unknown").

haveBadAccess(?Caller, ?Target) :-
    checkCalls(?Target),
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?AnyInvocation, ?Method),
    !AnyoneMayCall(?Method),
    !mayCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
    !mayCall(?Caller, ?CallerInvocation, ?Target, ?Method),
    !mayCall(?Caller, ?Target, ?Method),
    !mayCall(?Target).


// The test driver may call anything
mayCall(<_testDriver>, ?Target, ?Method) :- isRef(?Target), hasMethod(?Type, ?Method).
mayCall(<_testDriver>, ?Target, ?Method) :- isRef(?Target), hasConstructor(?Type, ?Method).


// Unknown objects may call themselves
mayCall(?Object, ?Object, "BaseUnknown.*") :- isA(?Object, "Unknown").
