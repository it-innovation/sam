/////////////////////////////////////////////////////////////////////////
//
// Â© University of Southampton IT Innovation Centre, 2011
//
// Copyright in this library belongs to the University of Southampton
// University Road, Highfield, Southampton, UK, SO17 1BJ
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
//	Created By :			Thomas Leonard
//	Created Date :			2011-11-22
//	Created for Project :		SERSCIS
//
/////////////////////////////////////////////////////////////////////////
//
//  License : GNU Lesser General Public License, version 2.1
//
/////////////////////////////////////////////////////////////////////////

// Note: for maySend, Pos can be -1 if the *sender* doesn't provide position
// information (e.g. Unknown sender).
//
// We don't care about Unknown receivers, since their Unknown.* method isn't GroupByArgAt.

// We need to handle the null case explicitly. Normally, SAM treats the lack of a value
// as including null, but we need to make it explicit here. Otherwise, SAM would assume that
// a method wasn't active in any context if no value was passed.

///////////////// By arg

// Disable the normal rules (TargetContext = CallerContext)
methodDoesContextMapping(?Method) :- GroupByArgAt(?Method, ?Pos).

isInvocation(?Context) :- GroupByArgCase(?Method, ?Value, ?Context).

// When Method is called, activate the contexts for every case which might
// receive a value.
didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetContext, ?Method) :-
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
    maySend(?Caller, ?CallerInvocation, ?CallSite, ?AnyPos, ?ArgValue),
    GroupByArgCase(?Method, ?ArgValue, ?TargetContext).

// A particular context didReceive a value if:
// - the method was called
// - the caller may have sent the value
// - the argument is not GroupByArgAt OR it is acceptable for this case

// the GroupByArgAt arg

// note: Pos cannot be -1 here since GroupByArgAt won't use that, but a later
// rule copies maySend(-1) to maySend(Pos).
didReceive(?Target, ?TargetInvocation, ?Method, ?Pos, ?ArgValue) :-
    ?ArgValue != <null>,            // filter out the special <null> value we add in below
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
    maySend(?Caller, ?CallerInvocation, ?CallSite, ?Pos, ?ArgValue),
    GroupByArgAt(?Method, ?Pos),
    GroupByArgCase(?Method, ?ArgValue, ?TargetInvocation).

// the other args

// senders that send at a particular position
// (don't check hasParam; Unknown receivers will set it to -1)
didReceive(?Target, ?TargetInvocation, ?Method, ?Pos, ?ArgValue) :-
    ?ArgValue != <null>,
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
    maySend(?Caller, ?CallerInvocation, ?CallSite, ?Pos, ?ArgValue),
    GroupByArgAt(?Method, ?GroupByArgAt), ?GroupByArgAt != ?Pos, ?Pos != -1,
    GroupByArgCase(?Method, ?AnyArgValue, ?TargetInvocation).

// senders that send at any position
// may receive at Pos if Pos is not GroupByArgAt
didReceive(?Target, ?TargetInvocation, ?Method, ?Pos, ?ArgValue) :-
    ?ArgValue != <null>,
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
    maySend(?Caller, ?CallerInvocation, ?CallSite, -1, ?ArgValue),
    hasParam(?Method, ?AnyParam, ?Pos),
    GroupByArgAt(?Method, ?GroupByArgAt), ?GroupByArgAt != ?Pos,
    GroupByArgCase(?Method, ?AnyArgValue, ?TargetInvocation).

error("missing GroupByArgCase", ?Method, ?ArgValue) :- 
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
    maySend(?Caller, ?CallerInvocation, ?CallSite, ?Pos, ?ArgValue),
    GroupByArgAt(?Method, ?Pos),
    !GroupByArgCase(?Method, ?ArgValue, ?TargetInvocation).

// If caller may send at any position, then they may send at GroupByArgAt

maySend(?Caller, ?CallerInvocation, ?CallSite, ?GroupByArgAt, ?ArgValue) :-
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
    GroupByArgAt(?Method, ?GroupByArgAt),
    maySend(?Caller, ?CallerInvocation, ?CallSite, -1, ?ArgValue).

// Caller can always send null
maySend(?Caller, ?CallerInvocation, ?CallSite, ?GroupByArgAt, <null>) :-
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
    GroupByArgAt(?Method, ?GroupByArgAt).

error("Multiple GroupByArgAt annotations!", ?Method) :-
    GroupByArgAt(?Method, ?Pos1),
    GroupByArgAt(?Method, ?Pos2),
    ?Pos1 != ?Pos2.

error("GroupByArgCase without GroupByArgAt", ?Method) :-
    GroupByArgCase(?Method, ?Value, ?Context),
    !GroupByArgAt(?Method, ?Pos).

error("GroupByArgAt method cannot accept arguments at any position", ?Method) :-
    GroupByArgAt(?Method, ?Pos),
    hasParam(?Method, ?Param, -1).
