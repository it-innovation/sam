/////////////////////////////////////////////////////////////////////////
//
// Â© University of Southampton IT Innovation Centre, 2011
//
// Copyright in this library belongs to the University of Southampton
// University Road, Highfield, Southampton, UK, SO17 1BJ
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
//	Created By :			Thomas Leonard
//	Created Date :			2011-11-22
//	Created for Project :		SERSCIS
//
/////////////////////////////////////////////////////////////////////////
//
//  License : GNU Lesser General Public License, version 2.1
//
/////////////////////////////////////////////////////////////////////////

// Note: for maySend, Pos can be any(int) if the sender doesn't provide position
// information (e.g. Unknown sender).
//
// We don't care about Unknown receivers, since their Unknown.* method isn't GroupByArgAt.

// We need to handle the null case explicitly. Normally, SAM treats the lack of a value
// as including null, but we need to make it explicit here. Otherwise, SAM would assume that
// a method wasn't active in any context if no value was passed.

///////////////// By arg

// Disable the normal rules (TargetContext = CallerContext)
methodDoesContextMapping(?Method) :- GroupByArgAt(?Method, ?Pos).

// When Method is called, activate the contexts for every case which might
// receive a value.
didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method) :-
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
    maySend(?Caller, ?CallerInvocation, ?CallSite, ?SendPos, ?SentValue),
    hasParam(?Method, ?ParamType, ?AnyParam, ?ParamPos),
    ASSIGN(?ParamType, ?SentValue, ?ReceivedValue),
    MATCH(?SendPos, ?ParamPos),
    GroupByArgAt(?Method, ?ParamPos),
    GroupByArgCase(?Method, ?CaseValue, ?TargetInvocation),
    MATCH(?ReceivedValue, ?CaseValue).

didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetContext, ?Method) :-
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
    GroupByArgCase(?Method, <null>, ?TargetContext).

// A particular context didReceive a value if:
// - the method was called
// - the caller may have sent the value
// - the argument is not GroupByArgAt OR it is acceptable for this case

// the GroupByArgAt arg

didReceive(?Target, ?TargetInvocation, ?Method, ?ParamPos, ?ReceivedMatchedValue) :-
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
    maySend(?Caller, ?CallerInvocation, ?CallSite, ?SendPos, ?SentValue),
    hasParam(?Method, ?ParamType, ?AnyParam, ?ParamPos),
    ASSIGN(?ParamType, ?SentValue, ?ReceivedValue),
    MATCH(?SendPos, ?ParamPos),
    GroupByArgAt(?Method, ?ParamPos),
    GroupByArgCase(?Method, ?CaseValue, ?TargetInvocation),
    MATCH_TO(?ReceivedValue, ?CaseValue, ?ReceivedMatchedValue).

// the other args

didReceive(?Target, ?TargetInvocation, ?Method, ?ParamPos, ?ReceivedValue) :-
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
    maySend(?Caller, ?CallerInvocation, ?CallSite, ?SendPos, ?SentValue),
    hasParam(?Method, ?ParamType, ?AnyParam, ?ParamPos),
    ASSIGN(?ParamType, ?SentValue, ?ReceivedValue),
    MATCH(?SendPos, ?ParamPos),
    GroupByArgAt(?Method, ?GroupByArgAt), ?GroupByArgAt != ?ParamPos.

error("missing GroupByArgCase", ?Method, ?ReceivedValue) :- 
    GroupByArgAt(?Method, ?ParamPos),
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
    maySend(?Caller, ?CallerInvocation, ?CallSite, ?SendPos, ?SentValue),
    MATCH(?SendPos, ?ParamPos),
    hasParam(?Method, ?ParamType, ?AnyParam, ?ParamPos),
    ASSIGN(?ParamType, ?SentValue, ?ReceivedValue),
    !didReceive(?Target, ?TargetInvocation, ?Method, ?ParamPos, ?ReceivedValue).

error("missing null GroupByArgCase", ?Method) :- 
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
    GroupByArgAt(?Method, ?Pos),
    !GroupByArgCase(?Method, <null>, ?TargetInvocation).


error("Multiple GroupByArgAt annotations!", ?Method) :-
    GroupByArgAt(?Method, ?Pos1),
    GroupByArgAt(?Method, ?Pos2),
    ?Pos1 != ?Pos2.

error("GroupByArgCase without GroupByArgAt", ?Method) :-
    GroupByArgCase(?Method, ?Value, ?Context),
    !GroupByArgAt(?Method, ?Pos).

error("GroupByArgAt method cannot accept arguments at any position", ?Method) :-
    GroupByArgAt(?Method, ?Pos),
    hasParam(?Method, ?ParamType, ?Param, any(int)).




///////////////// Group everything into a single context

methodDoesContextMapping(?Method) :- GroupAs(?Method, ?Context).

didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetContext, ?Method) :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
	GroupAs(?Method, ?TargetContext).

didReceive(?Target, ?TargetInvocation, ?Method, ?ParamPos, ?ReceivedValue) :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	maySend(?Caller, ?CallerInvocation, ?CallSite, ?SendPos, ?SentValue),
	MATCH(?SendPos, ?ParamPos),
	hasParam(?Method, ?ParamType, ?Param, ?ParamPos),
	ASSIGN(?ParamType, ?SentValue, ?ReceivedValue),
	GroupAs(?Method, ?TargetInvocation).


///////////////// Group all Unknown invocations into a single context

methodDoesContextMapping("BaseUnknown.*").

// Map all invocation contexts to the (usually single) initial context. There's no point
// modelling them separately since everything gets shared via the "ref" field anyway.
didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetContext, "BaseUnknown.*") :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, "BaseUnknown.*"),
	initialInvocation(?Target, ?TargetContext).

// Fall-back to default behaviour (use CallerInvocation) in case we don't have any initialInvocation.
didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?CallerInvocation, "BaseUnknown.*") :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, "BaseUnknown.*"),
	!initialInvocation(?Target, ?TargetContext).

// The normal argument-copying rule (which is otherwise disabled by methodDoesContextMapping).
didReceive(?Target, ?TargetInvocation, "BaseUnknown.*", ?ParamPos, ?ReceivedValue) :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, "BaseUnknown.*"),
	maySend(?Caller, ?CallerInvocation, ?CallSite, ?SendPos, ?SentValue),
	MATCH(?SendPos, ?ParamPos),
	hasParam("BaseUnknown.*", ?ParamType, ?Param, ?ParamPos),
	ASSIGN(?ParamType, ?SentValue, ?ReceivedValue).
