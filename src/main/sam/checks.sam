/////////////////////////////////////////////////////////////////////////
//
// Â© University of Southampton IT Innovation Centre, 2011
//
// Copyright in this library belongs to the University of Southampton
// University Road, Highfield, Southampton, UK, SO17 1BJ
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
//	Created By :			Thomas Leonard
//	Created Date :			2011-04-18
//	Created for Project :		SERSCIS
//
/////////////////////////////////////////////////////////////////////////
//
//  License : GNU Lesser General Public License, version 2.1
//
/////////////////////////////////////////////////////////////////////////

declare objectHasField(Ref object, String field).
declare hasMethodWithName(String method, String methodName).

/* If an Invocation has direct access to an object (via a local variable or a field on its object) */
hasRef(?Object, ?Value) :- local(?Object, ?Invocation, ?AnyVar, ?Value), isRef(?Value).
hasRef(?Object, ?Value) :- field(?Object, ?AnyVar, ?Value), isRef(?Value).

declare hasValue(Ref object, Object value).
hasValue(?Object, ?Value) :- local(?Object, ?Invocation, ?AnyVar, ?Value), !isRef(?Value).
hasValue(?Object, ?Value) :- field(?Object, ?AnyVar, ?Value), !isRef(?Value).

/* Error checking */

error("Not a value (not registered as a constant)", ?Object, ?Value) :-
    hasValue(?Object, ?Value), !isConstant(?Value).

error("Live invocation for non-alive object", ?Invocation, ?Object) :-
	liveMethod(?Object, ?Invocation, ?Method), !live(?Object).

getsAccess(?SourceObject, ?TargetObject) :-
	hasRef(?SourceObject, ?TargetObject),
	accessAllowed(?SourceObject, ?TargetObject, ?AnyMethod).

haveBadAccess(?SourceObject, ?TargetObject) :-
	denyAccess(?SourceObject, ?TargetObject),
	getsAccess(?SourceObject, ?TargetObject).

error("unsafe access may be possible", ?SourceObject, ?TargetObject) :-
	haveBadAccess(?SourceObject, ?TargetObject).

error("Local on non-invocation", ?Invocation, ?Var, ?Value) :- local(?Object, ?Invocation, ?Var, ?Value), !isInvocation(?Invocation).

objectHasField(?Object, ?Field) :- isA(?Object, ?Type), hasField(?Type, ?Field).
error("Undeclared field", ?Object, ?Var, ?Value) :- field(?Object, ?Var, ?Value), !objectHasField(?Object, ?Var).
error("Field on non-object", ?Object, ?Var, ?Value) :- field(?Object, ?Var, ?Value), !isRef(?Object).

hasMethodWithName(?Type, ?MethodName) :-
	hasMethod(?Type, ?Method),
	methodName(?Method, ?MethodName).

error("Unknown method in initialInvocation", ?Object, ?MethodName) :-
	initialInvocation(?Object, ?MethodName, ?Invocation),
	isA(?Object, ?Type),
	!hasMethodWithName(?Type, ?MethodName).

error("Unknown object in initialInvocation", ?Object) :-
	initialInvocation(?Object, ?MethodName, ?Invocation),
	!isRef(?Object).

failedAssertion(?N) :- assertionArrow(?N, ?Source, ?Target, ?Positive).

/* Value objects are not shown on the graph because the hold no interesting authority. */
error("Pure Value object holds reference", ?Object, ?Ref) :-
	isA(?Object, "Value"),
	hasRef(?Object, ?Ref).

/* Check that no calls were made on checkCalls objects except for mayCall ones. */

mayCall(?Caller, ?Invocation, ?CallSite, ?Target, ?Method) :-
	mustCall(?Caller, ?Invocation, ?CallSite, ?Target, ?Method).

/* Don't check the call-site for Unknown callers */
mayCall(?Caller, ?Invocation, ?Target, ?Method) :-
	mustCall(?Caller, ?Invocation, ?AnyCallSite, ?Target, ?Method),
	isA(?Caller, "Unknown").

haveBadAccess(?Caller, ?Target) :-
    checkCalls(?Target),
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?AnyInvocation, ?Method),
    !mayCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
    !mayCall(?Caller, ?CallerInvocation, ?Target, ?Method),
    !mayCall(?Caller, ?Target, ?Method).
