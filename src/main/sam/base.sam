/////////////////////////////////////////////////////////////////////////
//
// Â© University of Southampton IT Innovation Centre, 2011
//
// Copyright in this library belongs to the University of Southampton
// University Road, Highfield, Southampton, UK, SO17 1BJ
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
//	Created By :			Thomas Leonard
//	Created Date :			2011-03-26
//	Created for Project :		SERSCIS
//
/////////////////////////////////////////////////////////////////////////
//
//  License : GNU Lesser General Public License, version 2.1
//
/////////////////////////////////////////////////////////////////////////

/* declarations */

declare definedType(?Type).
declare field(?Object, ?FieldName, ?Value).
declare getsAccess(?SourceObject, ?TargetObject).
declare isA(?Object, ?Type).
declare isInvocation(?Invocation).
declare isObject(?Object).
declare live(?Object).
declare liveMethod(?Object, ?Invocation, ?Method).
declare local(?Object, ?Invocation, ?VarName, ?Value).
declare methodDoesContextMapping(?Method).
declare hasMethod(?Type, ?Method).
declare hasCallSite(?Method, ?CallSite).
declare catchesAllExceptions(?CallSite).
declare initialObject(?Object, ?Type).
declare initialInvocation(?Object, ?Invocation).
declare initialInvocation(?Object, ?MethodName, ?Invocation).
declare realInitialInvocation(?Object, ?Method, ?Invocation).
declare realNewObject(?Object, ?Invocation, ?ChildType, ?NewChild).
declare denyAccess(?Object, ?Target).
declare requireAccess(?Object, ?Target).
declare hasField(?Type, ?FieldName).
declare isType(?Type).
declare phase(?Phase).

declare expectFailure.
declare hasRef(?Object, ?Value).
declare haveBadAccess(?SourceObject, ?TargetObject).
declare missingGoodAccess(?SourceObject, ?TargetObject).

declare graphNode(?Node, ?Attrs).
declare graphEdge(?Source, ?Target, ?Attrs).
declare debugEdge(?Source, ?SourceInvocation, ?CallSite, ?Target, ?TargetInvocation).
declare showAllInvocations(?Object).
declare showInvocation(?Object, ?Invocation).
declare isHidden(?Source).
declare showOnlyProblemNodes.
declare hideUncalledReferences.
declare ignoreEdgeForRanking(?GraphSourceNode, ?GraphTargetNode).

declare didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method).
declare didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method).
declare didCall(?Caller, ?Target, ?Method).
declare mayAccept(?Method, ?ParamVar, ?Pos).
declare mayAccept(?Method, ?ParamVar, ?Pos, ?Value).

declare accessControlOn.
declare accessAllowed(?Caller, ?Target).
declare accessAllowed(?Caller, ?Target, ?Method).
declare methodMatches(?CallSite, ?Target, ?Method).
declare callsMethod(?CallSite, ?MethodName).
declare methodName(?Method, ?MethodName).
declare callsAnyMethod(?CallSite).
declare mayCallObject(?Caller, ?CallerInvocation, ?CallSite, ?Target).
declare didCreate(?Caller, ?Invocation, ?CallSite, ?NewChild).
declare hasConstructor(?Type, ?Method).
declare didGet(?Caller, ?CallerInvocation, ?CallSite, ?ResultValue).
declare didGetException(?Caller, ?CallerInvocation, ?CallSite, ?Exception).
declare mayReturn(?Object, ?Invocation, ?Method, ?Value).
declare mayThrow(?Object, ?Invocation, ?Method, ?Exception).
declare didAccept(?Target, ?TargetInvocation, ?ParamVar, ?ArgValue).
declare maySend(?Caller, ?CallSite, ?Pos, ?ArgValue).
declare maySend(?Caller, ?CallerInvocation, ?CallSite, ?Pos, ?ArgValue).
declare mayReceive(?Target, ?TargetInvocation, ?Method, ?Pos, ?ArgValue).
declare mayCreate(?CallSite, ?ChildType, ?NameHint).
declare newObject(?Object, ?Invocation, ?ChildType, ?NewObject).
declare isPublic(?Object).
declare debug.
declare assertionMessage(?Number, ?Msg).
declare failedAssertion(?Number).
declare assertionArrow(?Number, ?Source, ?Target, ?Positive).
declare mustCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method).
declare mayCall(?Caller, ?Target, ?Method).
declare mayCall(?Caller, ?CallerInvocation, ?Target, ?Method).
declare mayCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method).
declare checkCalls(?Object).
declare didCreate(?Factory, ?Object).

declare hasIdentity(?Object, ?Identity).

/* Sometimes it is necessary to split up different calls into different contexts based
 * on the value passed. Annotate methods with SwitchPos and SwitchCase to handle this.
 */
declare SwitchPos(?Method, ?Pos).
declare SwitchCase(?Method, ?Value, ?Context).


// RBAC (declared here so you don't get errors when turning off RBAC)
declare PermittedRole(?Method, ?Role).
declare grantsRole(?Target, ?Role, ?CallerIdentity).

// GUI
declare guiObjectTab(?Position, ?Label, ?Predicate, ?ObjectVar).


/* predicates on objects */

isObject(?X) :- isA(?X, ?Type).
live(?Object) :- initialObject(?Object, ?Type).
isA(?Object, ?Type) :- initialObject(?Object, ?Type).
isA(?NewObject, ?Type) :- mayCreate(?CallSite, ?Type, ?NameHint), didCreate(?Caller, ?Invocation, ?CallSite, ?NewObject).
isType(?Type) :- definedType(?Type).
isA(?Object, "Unknown") :- isA(?Object, ?Type), !definedType(?Type).


/* predicates on invocations */

liveMethod(?Object, ?Invocation, ?Method) :-
	realInitialInvocation(?Object, ?Method, ?Invocation).

isInvocation(?Invocation) :- realInitialInvocation(?Object, ?Method, ?Invocation).


/* assume Unknown objects are initially active in the "unknown" context, unless the user specified
 * a separate context.
 */
realInitialInvocation(?Object, ?Method, ?Invocation) :-
	initialInvocation(?Object, ?MethodName, ?Invocation),
	isA(?Object, ?Type),
	hasMethod(?Type, ?Method),
	methodName(?Method, ?MethodName).

/*
realInitialInvocation(?Object, ?Method, "unknown") :-
	initialObject(?Object, "Unknown"),
	hasMethod("Unknown", ?Method),
	!initialInvocation(?Object, ?AnyMethod, ?AnyInvocation),
	!initialInvocation(?Object, ?AnyInvocation).
	*/

realInitialInvocation(?Object, ?Method, ?Invocation) :-
	initialInvocation(?Object, ?Invocation),
	isA(?Object, ?Type),
	hasMethod(?Type, ?Method).

/* Every invocation has a "this" variable with a reference to its object. */
local(?Object, ?Invocation, "this", ?Object) :- liveMethod(?Object, ?Invocation, ?AnyMethod).


/* BaseUnknown behaviour: the object will do anything it is allowed to do */
class BaseUnknown {
	private Object ref;

	public BaseUnknown(Object args*) {
		this.*(args);
	}

	public Object *(Object args*) {
		try {
			ref = args;
			ref = this;
			ref = ref.*(ref*);
			return ref;
			throw ref;
		} catch (Throwable ex) {
			ref = ex;
                        throw ref;
		}
	}
}

/* Unknown objects additionally have many sensible defaults:
 * - they are active by default
 * - they allow access by anyone (i.e. have unknown access policies)
 * - they have references to all public objects
 */
class Unknown extends BaseUnknown {
}

accessAllowed(?Source, ?Target, ?Method) :-
	accessAllowed(?Source, ?Target), hasMethod(?CallSite, ?Method).

// Unknown objects have unknown access policies
accessAllowed(?Caller, ?Target) :-
    isObject(?Caller),
    isA(?Target, "Unknown").

// Objects may always call themselves
accessAllowed(?Caller, ?Caller) :- isObject(?Caller).

// Unknown objects have access to all public objects
field(?Object, "ref", ?Target) :- isA(?Object, "Unknown"), isPublic(?Target).

/* A simplified version of didCall/5 useful for writing goals. */
didCall(?Caller, ?Target, ?Method) :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method).

initialObject("_testDriver", "_TestDriver").

/* No behaviour and no references. This is useful if you want to pass literal values
 * as method arguments. Objects that are pure values are not graphed.
 */
class Value {}

isA(true, "Value").
isA(false, "Value").

/* The creator of an object is the factory that did the "new" operation. */
didCreate(?Factory, ?Object) :-
    didCreate(?Factory, ?FactoryInvocation, ?CreationSite, ?Object).

