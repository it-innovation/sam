/////////////////////////////////////////////////////////////////////////
//
// Â© University of Southampton IT Innovation Centre, 2011
//
// Copyright in this library belongs to the University of Southampton
// University Road, Highfield, Southampton, UK, SO17 1BJ
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
//	Created By :			Thomas Leonard
//	Created Date :			2011-03-26
//	Created for Project :		SERSCIS
//
/////////////////////////////////////////////////////////////////////////
//
//  License : GNU Lesser General Public License, version 2.1
//
/////////////////////////////////////////////////////////////////////////

/* declarations */

declare IS_STRING(String string).
declare TO_STRING(Object object, String string).
declare IS_REF(Ref ref).

declare definedType(String type).
declare field(Ref object, String fieldName, Object value).
declare getsAccess(Ref sourceObject, Ref targetObject).
declare isA(Ref object, String type).
declare isInvocation(String invocation).
declare isRef(Ref ref).
declare isConstant(Object object).
declare live(Ref object).
declare liveMethod(Ref object, String invocation, String method).
declare local(Ref object, String invocation, String varName, Object value).
declare methodDoesContextMapping(String method).
declare hasMethod(String type, String method).
declare hasCallSite(String method, String callSite).
declare catchesAllExceptions(String callSite).
declare initialObject(Ref object, String type).
declare initialInvocation(Ref object, String invocation).
declare initialInvocation(Ref object, String methodName, String invocation).
declare realInitialInvocation(Ref object, String method, String invocation).
declare realNewObject(Ref object, String invocation, String childType, Ref newChild).
declare denyAccess(Ref object, Ref target).
declare requireAccess(Ref object, Ref target).
declare hasField(String type, String fieldName).
declare isType(String type).
declare phase(String phase).

declare expectFailure().
declare hasRef(Ref object, Ref target).
declare haveBadAccess(Ref sourceObject, Ref targetObject).
declare missingGoodAccess(Ref sourceObject, Ref targetObject).

declare graphNode(String node, String attrs).
declare graphEdge(String source, String target, String attrs).
declare debugEdge(Ref source, String sourceInvocation, String callSite, Ref target, String targetInvocation).
declare showAllInvocations(Ref object).
declare showInvocation(Ref object, String invocation).
declare isHidden(Ref ref).
declare showOnlyProblemNodes().
declare hideUncalledReferences().
declare ignoreEdgeForRanking(Object source, Object target).
declare graphCluster(String clusterID, Object graphNode).
declare graphClusterColour(String clusterID, String colour).
declare graphClusterLabel(String clusterID, String label).

declare didCall(Ref caller, String callerInvocation, String callSite, Ref target, String targetInvocation, String method).
declare didCall(Ref caller, String callerInvocation, String callSite, Ref target, String method).
declare didCall(Ref caller, Ref target, String method).
declare hasParam(String method, String type, String paramVar, int pos).
declare mayAccept(String method, String paramVar, int pos).

declare accessControlOn().
declare accessAllowed(Ref caller, Ref target).
declare accessAllowed(Ref caller, Ref target, String method).
declare methodMatches(String callSite, Ref target, String method).
declare callsMethod(String callSite, String methodName).
declare methodName(String method, String methodName).
declare callsAnyMethod(String callSite).
declare mayCallObject(Ref caller, String callerInvocation, String callSite, Object target).
declare didCreate(Ref caller, String invocation, String callSite, Ref newChild).
declare hasConstructor(String type, String method).
declare didGet(Ref caller, String callerInvocation, String callSite, Object resultValue).
declare didGetException(Ref caller, String callerInvocation, String callSite, Object exception).
declare mayReturn(Ref object, String invocation, String method, Object value).
declare mayThrow(Ref object, String invocation, String method, Object exception).
declare didAccept(Ref target, String targetInvocation, String paramVar, Object argValue).
declare maySendFromAnyContext(Ref caller, String callSite, int pos, Object argValue).
declare maySend(Ref caller, String callerInvocation, String callSite, int pos, Object argValue).
declare didReceive(Ref target, String targetInvocation, String method, int pos, Object argValue).
declare mayCreate(String callSite, String childType, String nameHint).
declare newObject(Ref object, String invocation, String childType, Ref newObject).
declare isPublic(Ref object).
declare debug().
declare assertionMessage(int number, String msg).
declare failedAssertion(int number).
declare assertionArrow(int number, Ref source, Ref target, boolean positive).
declare mustCall(Ref caller, String callerInvocation, String callSite, Ref target, String method).
declare mayCall(Ref caller, Ref target, String method).
declare mayCall(Ref caller, String callerInvocation, Ref target, String method).
declare mayCall(Ref caller, String callerInvocation, String callSite, Ref target, String method).
declare checkCalls(Ref object).
declare didCreate(Ref factory, Ref object).

declare hasIdentity(Ref object, String identity).

declare GroupByArgAt(String method, int Pos).
declare GroupByArgCase(String method, Object value, String context).


// RBAC (declared here so you don't get errors when turning off RBAC)
declare PermittedRole(String method, String role).
declare grantsRole(Ref target, String role, String callerIdentity).

// GUI
declare guiObjectTab(int position, String label, String predicate, String objectVar).


/* predicates on objects */

isRef(?X) :- isA(?X, ?Type).
live(?Object) :- initialObject(?Object, ?Type).
isA(?Object, ?Type) :- initialObject(?Object, ?Type).
isA(?NewObject, ?Type) :- mayCreate(?CallSite, ?Type, ?NameHint), didCreate(?Caller, ?Invocation, ?CallSite, ?NewObject).
isType(?Type) :- definedType(?Type).
isA(?Object, "Unknown") :- isA(?Object, ?Type), !definedType(?Type).


/* predicates on invocations */

liveMethod(?Object, ?Invocation, ?Method) :-
	realInitialInvocation(?Object, ?Method, ?Invocation).

isInvocation(?Invocation) :- realInitialInvocation(?Object, ?Method, ?Invocation).


/* assume Unknown objects are initially active in the "unknown" context, unless the user specified
 * a separate context.
 */
realInitialInvocation(?Object, ?Method, ?Invocation) :-
	initialInvocation(?Object, ?MethodName, ?Invocation),
	isA(?Object, ?Type),
	hasMethod(?Type, ?Method),
	methodName(?Method, ?MethodName).

/*
realInitialInvocation(?Object, ?Method, "unknown") :-
	initialObject(?Object, "Unknown"),
	hasMethod("Unknown", ?Method),
	!initialInvocation(?Object, ?AnyMethod, ?AnyInvocation),
	!initialInvocation(?Object, ?AnyInvocation).
	*/

realInitialInvocation(?Object, ?Method, ?Invocation) :-
	initialInvocation(?Object, ?Invocation),
	isA(?Object, ?Type),
	hasMethod(?Type, ?Method).

/* Every invocation has a "this" variable with a reference to its object. */
local(?Object, ?Invocation, "this", ?Object) :- liveMethod(?Object, ?Invocation, ?AnyMethod).


/* BaseUnknown behaviour: the object will do anything it is allowed to do */
class BaseUnknown {
	private Object ref;

	public BaseUnknown(Object args*) {
		this.*(args);
	}

	public Object *(Object args*) {
		try {
			ref = args;
			ref = this;
			ref = ref.*(ref*);
			return ref;
			throw ref;
		} catch (Throwable ex) {
			ref = ex;
                        throw ref;
		}
	}
}

/* Unknown objects additionally have many sensible defaults:
 * - they are active by default
 * - they allow access by anyone (i.e. have unknown access policies)
 * - they have references to all public objects
 */
class Unknown extends BaseUnknown {
}

accessAllowed(?Source, ?Target, ?Method) :-
	accessAllowed(?Source, ?Target), hasMethod(?CallSite, ?Method).

// Unknown objects have unknown access policies
accessAllowed(?Caller, ?Target) :-
    isRef(?Caller),
    isA(?Target, "Unknown").

// Objects may always call themselves
accessAllowed(?Caller, ?Caller) :- isRef(?Caller).

// Unknown objects have access to all public objects
field(?Object, "ref", ?Target) :- isA(?Object, "Unknown"), isPublic(?Target).

// Unknown objects have access to all constants too
field(?Object, "ref", any(Value)) :- isA(?Object, "Unknown").

/* A simplified version of didCall/5 useful for writing goals. */
didCall(?Caller, ?Target, ?Method) :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method).

initialObject(<_testDriver>, "_TestDriver").

isConstant(true).
isConstant(false).
isConstant(?Identity) :- hasIdentity(?Object, ?Identity).

/* The creator of an object is the factory that did the "new" operation. */
didCreate(?Factory, ?Object) :-
    didCreate(?Factory, ?FactoryInvocation, ?CreationSite, ?Object).
