/////////////////////////////////////////////////////////////////////////
//
// Â© University of Southampton IT Innovation Centre, 2011
//
// Copyright in this library belongs to the University of Southampton
// University Road, Highfield, Southampton, UK, SO17 1BJ
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
//	Created By :			Thomas Leonard
//	Created Date :			2011-03-26
//	Created for Project :		SERSCIS
//
/////////////////////////////////////////////////////////////////////////
//
//  License : GNU Lesser General Public License, version 2.1
//
/////////////////////////////////////////////////////////////////////////


/* Access control */

accessAllowed(?Caller, ?Target, ?Method) :-
	!accessControlOn,
	isRef(?Caller),
	isA(?Target, ?TargetType),
	hasMethod(?TargetType, ?Method).

accessAllowed(<_testDriver>, ?Target) :-
	isRef(?Target).

/* Assume caller did a call if caller might do "Object resultVar = targetObject.do(argValue)" */
/* note: can't rely on accessAllowed's hasMethod, because user may provide their own */
didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method) :-
	mayCallObject(?Caller, ?CallerInvocation, ?CallSite, ?Target),
	isA(?Target, ?TargetType),
	hasMethod(?TargetType, ?Method),
	callsMethod(?CallSite, ?MethodName1),
	methodName(?Method, ?MethodName2),
	MATCH(?MethodName1, ?MethodName2, ?MethodName),
	accessAllowed(?Caller, ?Target, ?Method).

// For dynamic receivers
local(?Target, ?TargetInvocation, ?VarName, ?MethodName) :-
	savesMethodInLocal(?Method, ?VarName),
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	callsMethod(?CallSite, ?MethodName).

// For dynamic receivers with dynamic callers
// (MethodName may be any(String); just copy it though in that case)
local(?Target, ?TargetInvocation, ?VarName, ?MethodName) :-
	savesMethodInLocal(?Method, ?VarName),
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	callsMethodInLocal(?CallSite, ?CallerVarName),
	local(?Caller, ?CallerInvocation, ?CallerVarName, ?MethodName).

// For dynamic call-sites, e.g. targetObject.$method()
didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method) :-
	mayCallObject(?Caller, ?CallerInvocation, ?CallSite, ?Target),
	isA(?Target, ?TargetType),
	hasMethod(?TargetType, ?Method),
	callsMethodInLocal(?CallSite, ?LocalVarName),
	local(?Caller, ?CallerInvocation, ?LocalVarName, ?MethodName1),
	methodName(?Method, ?MethodName2),
	MATCH(?MethodName1, ?MethodName2, ?MethodName),
	accessAllowed(?Caller, ?Target, ?Method).

didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?CallerInvocation, ?Method) :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
	!methodDoesContextMapping(?Method).

/* Parent calls the child's constructor */
didCall(?Caller, ?Invocation, ?CallSite, ?NewChild, ?Method) :-
	didCreate(?Caller, ?Invocation, ?CallSite, ?NewChild),
	isA(?NewChild, ?ChildType),
	hasConstructor(?ChildType, ?Method).

liveMethod(?Target, ?TargetInvocation, ?Method) :-
	didCall(?AnyCaller, ?AnyCallerInvocation, ?AnyCallSite, ?Target, ?TargetInvocation, ?Method).

/* Caller might call some target which may return Value. */
didGet(?Caller, ?CallerInvocation, ?CallSite, ?ResultValue) :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	mayReturn(?Target, ?TargetInvocation, ?Method, ?ResultValue).

/* (might not have caught it, though) */
didGetException(?Caller, ?CallerInvocation, ?CallSite, ?Exception) :-
	!exceptionsOnlyValues,
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	mayThrow(?Target, ?TargetInvocation, ?Method, ?Exception).

didGetException(?Caller, ?CallerInvocation, ?CallSite, ?Exception) :-
	exceptionsOnlyValues,
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	mayThrow(?Target, ?TargetInvocation, ?Method, ?ThrownException),
	ASSIGN("Value", ?ThrownException, ?Exception).

/* (auto re-throw) */
mayThrow(?Caller, ?CallerInvocation, ?CallerMethod, ?Exception) :-
	hasCallSite(?CallerMethod, ?CallerCallSite),
	didCall(?Caller, ?CallerInvocation, ?CallerCallSite, ?Target, ?TargetInvocation, ?TargetMethod),
	didGetException(?Target, ?TargetInvocation, ?TargetCallSite, ?Exception),
	!catchesAllExceptions(?TargetCallSite).

/* (normal call; sender and receiver use fixed args) */
didAccept(?Target, ?TargetInvocation, ?ParamVar, ?ArgValue) :-
	didReceive(?Target, ?TargetInvocation, ?Method, ?Pos, ?ArgValue),
	mayAccept(?Method, ?ParamVar, ?Pos).

/* Target"s parameter variable may contain ArgValue if someone called it with that value. */
local(?Target, ?TargetInvocation, ?ParamVar, ?ArgValue) :-
	didAccept(?Target, ?TargetInvocation, ?ParamVar, ?ArgValue).

didCreate(?Caller, ?Invocation, ?CallSite, ?Child) :-
	liveMethod(?Caller, ?Invocation, ?Method),
	hasCallSite(?Method, ?CallSite),
	mayCreate(?CallSite, ?ChildType, ?NameHint),
	?Caller != <_testDriver>,
	MAKE_OBJECT(?NameHint, ?Invocation, ?Child).

didCreate(<_testDriver>, ?Invocation, ?CallSite, ?Child) :-
	liveMethod(<_testDriver>, ?Invocation, ?Method),
	hasCallSite(?Method, ?CallSite),
	mayCreate(?CallSite, ?ChildType, ?NameHint),
	MAKE_OBJECT(?NameHint, "", ?Child).

live(?NewChild) :-
	didCreate(?Object, ?Invocation, ?CallSite, ?NewChild).


// Include maySendFromAnyContext/4 in maySend/5 to reduce the number of rules we
// need to write.
maySend(?Caller, ?CallerInvocation, ?CallSite, ?Pos, ?ArgValue) :-
    maySendFromAnyContext(?Caller, ?CallSite, ?Pos, ?ArgValue),
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method).

didReceive(?Target, ?TargetInvocation, ?Method, ?ParamPos, ?ReceivedValue) :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	maySend(?Caller, ?CallerInvocation, ?CallSite, ?SendPos, ?SentValue),
        MATCH(?SendPos, ?ParamPos, ?DontCarePos),
        hasParam(?Method, ?ParamType, ?Param, ?ParamPos),
        ASSIGN(?ParamType, ?SentValue, ?ReceivedValue),
        !methodDoesContextMapping(?Method).

// Created objects live in the same JVM as their factory, and so have their
// messages signed with the same X.509 certificate
hasIdentity(?Child, ?Identity) :- 
    hasIdentity(?Factory, ?Identity),
    didCreate(?Factory, ?Invocation, ?CallSite, ?Child),
    !noDefaultIdentity(?CallSite).


/* RBAC */

/* Caller may invoke Target.Method if: */
accessAllowed(?Caller, ?Target, ?Method) :-
    hasIdentity(?Caller, ?CallerIdentity),              // Caller's identity is Identity
    grantsRole(?Target, ?Role, ?GrantedIdentity),       // Target grants Role to Identity
    MATCH(?CallerIdentity, ?GrantedIdentity, ?UnusedResult),  // Might be any() type
    PermittedRole(?Method, ?Role).                      // Role is allowed to invoke the method

/* Objects may call others with the same identity. */
accessAllowed(?Caller, ?Target) :-
	hasIdentity(?Caller, ?Identity),
	hasIdentity(?Target, ?Identity).

grantsRole(?Target, ?Role, ?Identity) :-
    FieldGrantsRole(?Type, ?FieldName, ?Role),
    isA(?Target, ?Type),
    field(?Target, ?FieldName, ?Value),
    ASSIGN("String", ?Value, ?Identity).
