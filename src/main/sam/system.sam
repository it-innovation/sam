/////////////////////////////////////////////////////////////////////////
//
// Â© University of Southampton IT Innovation Centre, 2011
//
// Copyright in this library belongs to the University of Southampton
// University Road, Highfield, Southampton, UK, SO17 1BJ
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
//	Created By :			Thomas Leonard
//	Created Date :			2011-03-26
//	Created for Project :		SERSCIS
//
/////////////////////////////////////////////////////////////////////////
//
//  License : GNU Lesser General Public License, version 2.1
//
/////////////////////////////////////////////////////////////////////////


/* Access control */

accessAllowed(?Caller, ?Target, ?Method) :-
	!accessControlOn,
	isRef(?Caller),
	isA(?Target, ?TargetType),
	hasMethod(?TargetType, ?Method).

accessAllowed(<_testDriver>, ?Target) :-
	isRef(?Target).

/* Which methods may CallSite invoke on Target */
methodMatches(?CallSite, ?Target, ?Method) :-	/* Exact match */
	callsMethod(?CallSite, ?MethodName),
	isA(?Target, ?TargetType),
	hasMethod(?TargetType, ?Method),
	methodName(?Method, ?MethodName).
methodMatches(?CallSite, ?Target, ?Method) :-	/* Call may call any method */
	callsAnyMethod(?CallSite),
	isA(?Target, ?TargetType),
	hasMethod(?TargetType, ?Method).
methodMatches(?CallSite, ?Target, ?Method) :-	/* Any call matches a "*" method */
	methodName(?Method, "*"),
	hasCallSite(?CallerMethod, ?CallSite),
	isRef(?Target).

/* Assume caller did a call if caller might do "Object resultVar = targetObject.do(argValue)" */
/* note: can't rely on accessAllowed's hasMethod, because user may provide their own */
didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method) :-
	mayCallObject(?Caller, ?CallerInvocation, ?CallSite, ?Target),
	isA(?Target, ?TargetType),
	hasMethod(?TargetType, ?Method),
	methodMatches(?CallSite, ?Target, ?Method),
	accessAllowed(?Caller, ?Target, ?Method).

didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?CallerInvocation, ?Method) :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method),
	!methodDoesContextMapping(?Method).

/* Parent calls the child's constructor */
didCall(?Caller, ?Invocation, ?CallSite, ?NewChild, ?Method) :-
	didCreate(?Caller, ?Invocation, ?CallSite, ?NewChild),
	isA(?NewChild, ?ChildType),
	hasConstructor(?ChildType, ?Method).

liveMethod(?Target, ?TargetInvocation, ?Method) :-
	didCall(?AnyCaller, ?AnyCallerInvocation, ?AnyCallSite, ?Target, ?TargetInvocation, ?Method).

/* Caller might call some target which may return Value. */
didGet(?Caller, ?CallerInvocation, ?CallSite, ?ResultValue) :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	mayReturn(?Target, ?TargetInvocation, ?Method, ?ResultValue).

/* (might not have caught it, though) */
didGetException(?Caller, ?CallerInvocation, ?CallSite, ?Exception) :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	mayThrow(?Target, ?TargetInvocation, ?Method, ?Exception).

/* (auto re-throw) */
mayThrow(?Caller, ?CallerInvocation, ?CallerMethod, ?Exception) :-
	hasCallSite(?CallerMethod, ?CallerCallSite),
	didCall(?Caller, ?CallerInvocation, ?CallerCallSite, ?Target, ?TargetInvocation, ?TargetMethod),
	didGetException(?Target, ?TargetInvocation, ?TargetCallSite, ?Exception),
	!catchesAllExceptions(?TargetCallSite).

/* (normal call; sender and receiver use fixed args) */
didAccept(?Target, ?TargetInvocation, ?ParamVar, ?ArgValue) :-
	didReceive(?Target, ?TargetInvocation, ?Method, ?Pos, ?ArgValue),
	mayAccept(?Method, ?ParamVar, ?Pos).

/* Target"s parameter variable may contain ArgValue if someone called it with that value. */
local(?Target, ?TargetInvocation, ?ParamVar, ?ArgValue) :-
	didAccept(?Target, ?TargetInvocation, ?ParamVar, ?ArgValue).

didCreate(?Caller, ?Invocation, ?CallSite, ?Child) :-
	liveMethod(?Caller, ?Invocation, ?Method),
	hasCallSite(?Method, ?CallSite),
	mayCreate(?CallSite, ?ChildType, ?NameHint),
	realNewObject(?Caller, ?Invocation, ?NameHint, ?Child).

live(?NewChild) :-
	didCreate(?Object, ?Invocation, ?CallSite, ?NewChild).


// Include maySendFromAnyContext/4 in maySend/5 to reduce the number of rules we
// need to write.
maySend(?Caller, ?CallerInvocation, ?CallSite, ?Pos, ?ArgValue) :-
    maySendFromAnyContext(?Caller, ?CallSite, ?Pos, ?ArgValue),
    didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?Method).

// normal -> normal (Pos >= 0), and
// Unknown -> Unknown (Pos = -1)
didReceive(?Target, ?TargetInvocation, ?Method, ?Pos, ?ArgValue) :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	maySend(?Caller, ?CallerInvocation, ?CallSite, ?Pos, ?ArgValue),
        hasParam(?Method, ?Param, ?Pos),
        !methodDoesContextMapping(?Method).

// can receive at -1 anything sent at any position
// normal -> Unknown
// Unknown -> Unknown
didReceive(?Target, ?TargetInvocation, ?Method, -1, ?ArgValue) :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	maySend(?Caller, ?CallerInvocation, ?CallSite, ?Pos, ?ArgValue),
        hasParam(?Method, ?Param, -1),
        !methodDoesContextMapping(?Method).

// can receive at any position we have if it may be sent to any position
// Unknown -> normal
didReceive(?Target, ?TargetInvocation, ?Method, ?Pos, ?ArgValue) :-
	didCall(?Caller, ?CallerInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	maySend(?Caller, ?CallerInvocation, ?CallSite, -1, ?ArgValue),
        hasParam(?Method, ?Param, ?Pos),
        !methodDoesContextMapping(?Method).

/* Default aggregation for child objects */

declare typeHasCallSite(String type, String callSite).
typeHasCallSite(?Type, ?CallSite) :- hasMethod(?Type, ?Method), hasCallSite(?Method, ?CallSite).
typeHasCallSite(?Type, ?CallSite) :- hasConstructor(?Type, ?Constructor), hasCallSite(?Constructor, ?CallSite).
	

realNewObject(?Object, ?Invocation, ?NameHint, ?NewChild) :-
	isA(?Object, ?Type),
	typeHasCallSite(?Type, ?CallSite),
	mayCreate(?CallSite, ?ChildType, ?NameHint),
	newObject(?Object, ?Invocation, ?ChildType, ?NewChild).
realNewObject(<_testDriver>, ?Invocation, ?NameHint, ?NewChild) :-
	mayCreate(?CallSite, ?ChildType, ?NameHint),
	isInvocation(?Invocation),
        MAKE_OBJECT(?NameHint, "", ?NewChild).
realNewObject(?Object, ?Invocation, ?NameHint, ?NewChild) :-
	?Object != <_testDriver>,
	isA(?Object, ?Type),
	typeHasCallSite(?Type, ?CallSite),
	mayCreate(?CallSite, ?ChildType, ?NameHint),
	isInvocation(?Invocation),
	!newObject(?Object, ?Invocation, ?ChildType, ?AnyChild),
	MAKE_OBJECT(?NameHint, ?Invocation, ?NewChild).

// Created objects live in the same JVM as their factory, and so have their
// messages signed with the same X.509 certificate
hasIdentity(?Child, ?Identity) :- 
    hasIdentity(?Factory, ?Identity),
    didCreate(?Factory, ?Child).

// Give all identities the Value type. This allows them to be passed
// as arguments if necessary.
isA(?X, "Value") :- hasIdentity(?Object, ?X).


/* RBAC */

/* Caller may invoke Target.Method if: */
accessAllowed(?Caller, ?Target, ?Method) :-
    hasIdentity(?Caller, ?Identity),           // Caller's identity is Identity
    grantsRole(?Target, ?Role, ?Identity),     // Target grants Role to Identity
    PermittedRole(?Method, ?Role).             // Role is allowed to invoke the method

/* Objects may call others with the same identity. */
accessAllowed(?Caller, ?Target) :-
	hasIdentity(?Caller, ?Identity),
	hasIdentity(?Target, ?Identity).
