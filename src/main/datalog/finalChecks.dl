/////////////////////////////////////////////////////////////////////////
//
// Â© University of Southampton IT Innovation Centre, 2011
//
// Copyright in this library belongs to the University of Southampton
// University Road, Highfield, Southampton, UK, SO17 1BJ
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
//	Created By :			Thomas Leonard
//	Created Date :			2011-08-09
//	Created for Project :		SERSCIS
//
/////////////////////////////////////////////////////////////////////////
//
//  License : GNU Lesser General Public License, version 2.1
//
/////////////////////////////////////////////////////////////////////////

/* Sanity checking */

error("Unknown source object in deny rule", ?A) :- denyAccess(?A, ?B), !isObject(?A).
error("Unknown target object in deny rule", ?B) :- denyAccess(?A, ?B), !isObject(?B).


/* Goal checking (here because we only check after applying the system rules) */

missingGoodAccess(?SourceObject, ?TargetObject) :-
	requireAccess(?SourceObject, ?TargetObject),
	!getsAccess(?SourceObject, ?TargetObject).

error("required access is not possible", ?SourceObject, ?TargetObject) :-
	missingGoodAccess(?SourceObject, ?TargetObject).

debug :- haveBadAccess(?Source, ?Target).

debug :- failedAssertion(?N).
error(?Msg) :- failedAssertion(?N), assertionMessage(?N, ?Msg).

/* Check that all mustCall calls were made. */

declare missingMustCall(?Source, ?Target, ?Method).
missingMustCall(?Source, ?Target, ?Method) :-
    mustCall(?Source, ?Target, ?Method),
    !didCall(?Source, ?Target, ?Method).

missingGoodAccess(?Source, ?Target) :-
    missingMustCall(?Source, ?Target, ?Method).

/* error("mustCall but not didCall", ?Source, ?Target, ?Method) :-
	missingMustCall(?Source, ?Target, ?Method). */
