/* vim: set syntax=prolog : */

/* Graphing */

graphNode(?Object, "fontcolor=red") :- live(?Object), isA(?Object, "Unknown").
graphNode(?Object, "") :- live(?Object), isObject(?Object), !isA(?Object, "Unknown").

graphField(?Object, ?Target) :- isObject(?Object), field(?Object, ?Var, ?Target), ?Object != ?Target.
graphLocal(?Object, ?Target) :- local(?Object, ?Context, ?Var, ?Target), ?Object != ?Target, !graphField(?Object, ?Target), !showInvocation(?Object, ?Context).

graphEdge(?Object, ?Target, "") :- graphField(?Object, ?Target), !graphField(?Target, ?Object).
graphEdge(?Object, ?Target, "dir=both") :- graphField(?Object, ?Target), graphField(?Target, ?Object), ?Target > ?Object.

graphEdge(?Object, ?Target, "color=blue,constraint=false") :- graphLocal(?Object, ?Target), !graphLocal(?Target, ?Object).
graphEdge(?Object, ?Target, "dir=both,color=blue,constraint=false") :- graphLocal(?Object, ?Target), graphLocal(?Target, ?Object), ?Target > ?Object.

graphEdge(?Object, ?Target, "color=red") :- haveBadAccess(?Object, ?Target).
graphEdge(?Object, ?Target, "color=red,style=dashed") :- missingGoodAccess(?Object, ?Target).


/* Show invocation objects */

graphNode(?InvocationNode, "color=green,fontcolor=green") :-
	live(?Object, ?Invocation),
	showInvocation(?Object, ?Invocation),
	graphInvocation(?Object, ?Invocation, ?InvocationNode).

shouldGraphInvocation(?Source, ?SourceInvocation, ?Target, ?TargetInvocation) :- live(?Target, ?TargetInvocation), showInvocation(?Source, ?SourceInvocation).
shouldGraphInvocation(?Source, ?SourceInvocation, ?Target, ?TargetInvocation) :- live(?Source, ?SourceInvocation), showInvocation(?Target, ?TargetInvocation).

/* Which graph object is used to represent this invocation. */
graphInvocation(?Object, ?Invocation, ?Str) :- showInvocation(?Object, ?Invocation), ?Str = STRING_CONCAT(?Object, ?Invocation).
graphInvocation(?Object, ?Invocation, ?Object) :- live(?Object, ?Invocation), !showInvocation(?Object, ?Invocation).

graphInvocationEdge(?GraphSourceNode, ?GraphTargetNode) :-
	shouldGraphInvocation(?Source, ?SourceInvocation, ?Target, ?TargetInvocation),
	didCall(?Source, ?SourceInvocation, ?Target, ?TargetInvocation, ?M, ?A, ?R),
	graphInvocation(?Source, ?SourceInvocation, ?GraphSourceNode),
	graphInvocation(?Target, ?TargetInvocation, ?GraphTargetNode),
	?GraphSourceNode != ?GraphTargetNode.

graphEdge(?A, ?B, "color=green") :- graphInvocationEdge(?A, ?B), !graphInvocationEdge(?B, ?A).
graphEdge(?A, ?B, "color=green,dir=both") :- graphInvocationEdge(?A, ?B), graphInvocationEdge(?B, ?A), ?B > ?A.

graphEdge(?InvocationNode, ?TargetObject, "color=blue") :-
	graphInvocation(?SourceObject, ?Invocation, ?InvocationNode),
	showInvocation(?SourceObject, ?Invocation),
	local(?SourceObject, ?Invocation, ?AnyVar, ?TargetObject),
	?SourceObject != ?TargetObject.
graphEdge(?InvocationNode, ?TargetObject, "color=blue,style=bold,weight=40") :-
	graphInvocation(?SourceObject, ?Invocation, ?InvocationNode),
	showInvocation(?SourceObject, ?Invocation),
	local(?SourceObject, ?Invocation, ?AnyVar, ?TargetObject),
	?SourceObject = ?TargetObject.

graphEdge(?SourceNode, ?TargetNode, "color=orange,fontcolor=orange", ?Label) :-
	debugEdge(?Source, ?SourceInvocation, ?Target, ?TargetInvocation, ?Label),
	graphInvocation(?Source, ?SourceInvocation, ?SourceNode),
	graphInvocation(?Target, ?TargetInvocation, ?TargetNode).
