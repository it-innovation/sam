/////////////////////////////////////////////////////////////////////////
//
// Â© University of Southampton IT Innovation Centre, 2011
//
// Copyright in this library belongs to the University of Southampton
// University Road, Highfield, Southampton, UK, SO17 1BJ
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
//	Created By :			Thomas Leonard
//	Created Date :			2011-03-26
//	Created for Project :		SERSCIS
//
/////////////////////////////////////////////////////////////////////////
//
//  License : GNU Lesser General Public License, version 2.1
//
/////////////////////////////////////////////////////////////////////////

declare calledEdgeViaField(?GraphSourceNode, ?GraphTargetNode).
declare calledEdgeViaLocal(?GraphSourceNode, ?GraphTargetNode).
declare fieldEdge(?Source, ?Target).
declare graphInvocationEdge(?GraphSourceNode, ?GraphTargetNode).
declare graphInvocation(?Object, ?Invocation, ?Str).
declare localEdge(?GraphSourceNode, ?Target).
declare problemEdgeViaField(?GraphSourceNode, ?GraphTargetNode).
declare problemEdgeViaLocal(?GraphSourceNode, ?GraphTargetNode).
declare shouldGraphInvocation(?Source, ?SourceInvocation, ?Target, ?TargetInvocation).
declare calledEdge(?Source, ?Target).
declare uncalledEdge(?Source, ?Target).
declare problemEdge(?Source, ?Target).
declare errorEdge(?Source, ?Target).
declare isBoring(?Source, ?Target).
declare hasNonValueType(?Object).

/* Every unknown object knows the address of every public object, so don't bother showing that. */
isBoring(?Source, ?Target) :-
    isA(?Source, "Unknown"),
    isPublic(?Target),
    !didCall(?Source, ?C1, ?CallSite, ?Target, ?C2, ?Method).

isBoring(?X, ?Y) :-
    hideUncalledReferences,
    hasRef(?X, ?Y), !didCall(?X, ?Y, ?M), !didCreate(?X, ?Y).

isHidden("_testDriver").

/* Don't graph values (but if something is both a real object and a value, do graph it). */
hasNonValueType(?Object) :- isA(?Object, ?Type), ?Type != "Value".
isHidden(?Object) :- isObject(?Object), !hasNonValueType(?Object).

/* Graphing */

graphNode(?Object, "shape=record") :- live(?Object), isPublic(?Object).
graphNode(?Object, "fontcolor=red") :- live(?Object), isA(?Object, "Unknown").
graphNode(?Object, "") :- live(?Object), isObject(?Object), !isA(?Object, "Unknown").

graphEdge(?Object, ?Target, "color=red,style=dashed") :- missingGoodAccess(?Object, ?Target).
errorEdge(?Object, ?Target) :- haveBadAccess(?Object, ?Target).

graphEdge(?Object, ?Target, "color=red,style=dashed") :- assertionArrow(?N, ?Object, ?Target, true).
errorEdge(?Object, ?Target) :- assertionArrow(?N, ?Object, ?Target, false).

/* There are all the edges that logically exist, even if we might not show all of them. */

/* (object to object) */
fieldEdge(?Source, ?Target) :-
	field(?Source, ?AnyField, ?Target).

/* (invocation to object) */
localEdge(?GraphSourceNode, ?Target) :-
	graphInvocation(?Source, ?SourceInvocation, ?GraphSourceNode),
	local(?Source, ?SourceInvocation, ?AnyLocal, ?Target).

/* (invocation to invocation) */
calledEdgeViaLocal(?GraphSourceNode, ?GraphTargetNode) :-
	graphInvocation(?Source, ?SourceInvocation, ?GraphSourceNode),
	graphInvocation(?Target, ?TargetInvocation, ?GraphTargetNode),
	didCall(?Source, ?SourceInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	!isBoring(?Source, ?Target),
	local(?Source, ?SourceInvocation, ?AnyLocal, ?Target).

calledEdgeViaField(?GraphSourceNode, ?GraphTargetNode) :-
	graphInvocation(?Source, ?SourceInvocation, ?GraphSourceNode),
	graphInvocation(?Target, ?TargetInvocation, ?GraphTargetNode),
	didCall(?Source, ?SourceInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	!isBoring(?Source, ?Target),
	field(?Source, ?AnyVar, ?Target).

/* (invocation to invocation) */
problemEdgeViaLocal(?GraphSourceNode, ?GraphTargetNode) :-
	graphInvocation(?Source, ?SourceInvocation, ?GraphSourceNode),
	graphInvocation(?Target, ?TargetInvocation, ?GraphTargetNode),
	local(?Source, ?SourceInvocation, ?AnyLocal, ?Target),
	debugEdge(?Source, ?SourceInvocation, ?CallSite, ?Target, ?TargetInvocation).

/* (invocation to invocation) */
problemEdgeViaField(?GraphSourceNode, ?GraphTargetNode) :-
	graphInvocation(?Source, ?SourceInvocation, ?GraphSourceNode),
	graphInvocation(?Target, ?TargetInvocation, ?GraphTargetNode),
	field(?Source, ?AnyVar, ?Target),
	debugEdge(?Source, ?SourceInvocation, ?CallSite, ?Target, ?TargetInvocation).

problemEdge(?Source, ?Target) :- problemEdgeViaField(?Source, ?Target).
problemEdge(?Source, ?Target) :- problemEdgeViaLocal(?Source, ?Target).

/* (invocation to object, for locals) */
calledEdge(?GraphSourceNode, ?Target) :-
	graphInvocation(?Source, ?SourceInvocation, ?GraphSourceNode),
	local(?Source, ?SourceInvocation, ?AnyLocal, ?Target),
	didCall(?Source, ?SourceInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	!isBoring(?Source, ?Target).

/* (object to object, for fields) */
calledEdge(?Source, ?Target) :-
	field(?Source, ?AnyLocal, ?Target),
	didCall(?Source, ?SourceInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	!isBoring(?Source, ?Target).

/* (invocation to object) */
uncalledEdge(?GraphSourceNode, ?Target) :-
	graphInvocation(?Source, ?SourceInvocation, ?GraphSourceNode),
	local(?Source, ?SourceInvocation, ?AnyLocal, ?Target),
	!calledEdge(?GraphSourceNode, ?Target),
	!isBoring(?Source, ?Target).

/* (object to object)
 * Ignores public objects to avoid cluttering the graph.
 */
uncalledEdge(?Source, ?Target) :-
	field(?Source, ?AnyLocal, ?Target),
	!calledEdge(?Source, ?Target),
	!isBoring(?Source, ?Target).

/* Hide arrows that have higher-priority replacements. */

graphEdge(?Object, ?Target, "color=red") :- errorEdge(?Object, ?Target).

/* Problem field */
graphEdge(?GraphSourceNode, ?GraphTargetNode, "color=orange") :-
	?GraphSourceNode != ?GraphTargetNode,
	!errorEdge(?GraphSourceNode, ?GraphTargetNode),
	problemEdgeViaField(?GraphSourceNode, ?GraphTargetNode).

/* Problem local */
graphEdge(?GraphSourceNode, ?GraphTargetNode, "color=orange,style=dashed") :-
	?GraphSourceNode != ?GraphTargetNode,
	problemEdgeViaLocal(?GraphSourceNode, ?GraphTargetNode),
	!errorEdge(?GraphSourceNode, ?GraphTargetNode),
	!problemEdgeViaField(?GraphSourceNode, ?GraphTargetNode).

/* Called field */
graphEdge(?GraphSourceNode, ?GraphTargetNode, "color=green") :-
	?GraphSourceNode != ?GraphTargetNode,
	calledEdgeViaField(?GraphSourceNode, ?GraphTargetNode),
	!errorEdge(?GraphSourceNode, ?GraphTargetNode),
	!problemEdgeViaField(?GraphSourceNode, ?GraphTargetNode).

/* Called local */
graphEdge(?GraphSourceNode, ?GraphTargetNode, "color=green,style=dashed") :-
	?GraphSourceNode != ?GraphTargetNode,
	calledEdgeViaLocal(?GraphSourceNode, ?GraphTargetNode),
	!errorEdge(?GraphSourceNode, ?GraphTargetNode),
	!calledEdgeViaField(?GraphSourceNode, ?GraphTargetNode),
	!problemEdgeViaLocal(?GraphSourceNode, ?GraphTargetNode),
	!problemEdgeViaField(?GraphSourceNode, ?GraphTargetNode).

/* Uncalled field */
graphEdge(?GraphSourceNode, ?GraphTargetNode, "") :-
	?GraphSourceNode != ?GraphTargetNode,
	uncalledEdge(?GraphSourceNode, ?GraphTargetNode),
	fieldEdge(?GraphSourceNode, ?GraphTargetNode),
	!problemEdge(?GraphSourceNode, ?GraphTargetNode).

/* Uncalled local */
graphEdge(?GraphSourceNode, ?GraphTargetNode, "style=dashed") :-
	?GraphSourceNode != ?GraphTargetNode,
	uncalledEdge(?GraphSourceNode, ?GraphTargetNode),
	localEdge(?GraphSourceNode, ?GraphTargetNode),
	!fieldEdge(?GraphSourceNode, ?GraphTargetNode),
	!problemEdge(?GraphSourceNode, ?GraphTargetNode).

/* Show invocation objects */

showInvocation(?Object, ?Invocation) :- showAllInvocations(?Object), liveMethod(?Object, ?Invocation, ?AnyMethod).

graphNode(?InvocationNode, "color=green,fontcolor=green") :-
	liveMethod(?Object, ?Invocation, ?AnyMethod),
	showInvocation(?Object, ?Invocation),
	graphInvocation(?Object, ?Invocation, ?InvocationNode).

shouldGraphInvocation(?Source, ?SourceInvocation, ?Target, ?TargetInvocation) :- liveMethod(?Target, ?TargetInvocation, ?AnyMethod), showInvocation(?Source, ?SourceInvocation).
shouldGraphInvocation(?Source, ?SourceInvocation, ?Target, ?TargetInvocation) :- liveMethod(?Source, ?SourceInvocation, ?AnyMethod), showInvocation(?Target, ?TargetInvocation).

/* Which graph object is used to represent this invocation. */
graphInvocation(?Object, ?Invocation, ?Str) :-
	showInvocation(?Object, ?Invocation),
	STRING_CONCAT(?Object, "#", ?Prefix),
	STRING_CONCAT(?Prefix, ?Invocation, ?Str).
graphInvocation(?Object, ?Invocation, ?Object) :- liveMethod(?Object, ?Invocation, ?AnyMethod), !showInvocation(?Object, ?Invocation).

graphInvocationEdge(?GraphSourceNode, ?GraphTargetNode) :-
	shouldGraphInvocation(?Source, ?SourceInvocation, ?Target, ?TargetInvocation),
	didCall(?Source, ?SourceInvocation, ?CallSite, ?Target, ?TargetInvocation, ?Method),
	graphInvocation(?Source, ?SourceInvocation, ?GraphSourceNode),
	graphInvocation(?Target, ?TargetInvocation, ?GraphTargetNode),
	?GraphSourceNode != ?GraphTargetNode.


/* If showOnlyProblemNodes is on, only show "important" objects */

declare hasProblem.
hasProblem :- errorEdge(?X, ?Y).
hasProblem :- problemEdge(?X, ?Y).

declare showInProblemGraph(?Object).
showInProblemGraph(?Object) :- initialObject(?Object, ?Type).
showInProblemGraph(?Object) :- didCreate(?Object, ?Important), showInProblemGraph(?Important).
showInProblemGraph(?Source) :- errorEdge(?Source, ?Target).
showInProblemGraph(?Target) :- errorEdge(?Source, ?Target).
showInProblemGraph(?Source) :- problemEdge(?Source, ?Target).
showInProblemGraph(?Target) :- problemEdge(?Source, ?Target).

isHidden(?Object) :- showOnlyProblemNodes, isObject(?Object), hasProblem, !showInProblemGraph(?Object).



declare visibleGraphNode(?GraphNode, ?Attrs).
declare visibleGraphEdge(?SourceGraphNode, ?TargetGraphNode, ?Attrs).

visibleGraphNode(?GraphNode, ?Attrs) :-
	graphNode(?GraphNode, ?Attrs),
	!isHidden(?GraphNode).

visibleGraphEdge(?SourceGraphNode, ?TargetGraphNode, ?Attrs) :-
	graphEdge(?SourceGraphNode, ?TargetGraphNode, ?Attrs),
	!isHidden(?SourceGraphNode),
	!isHidden(?TargetGraphNode).
