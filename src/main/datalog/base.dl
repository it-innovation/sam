/* vim: set syntax=prolog : */

/* predicates

local(?Invocation, ?VarName, ?Value)
field(?Object, ?VarName, ?Value)

*/

/* aggregation */

/* realInvocationObject
 *
 * When Caller invokes Target in invocation context CallerInvocation, the context
 * of the resulting invocation at Target is the same, unless overridden by
 * invocationObject.
 */
realInvocationObject(?Caller, ?CallerInvocation, ?Target, ?TargetInvocation) :-
	invocationObject(?Caller, ?CallerInvocation, ?Target, ?TargetInvocation).
realInvocationObject(?Caller, ?CallerInvocation, ?Target, ?CallerInvocation) :-
	isObject(?Caller),
	isObject(?Target),
	isInvocation(?CallerInvocation),
	!invocationObject(?Caller, ?CallerInvocation, ?Target, ?AnyTargetInvocation).

/* static predicates on types */

isType(?Type) :- isA(?AnyObject, ?Type).
hasLocal(?Type, "this") :- isType(?Type).
hasVar(?Type, ?VarName) :- hasField(?Type, ?VarName).
hasVar(?Type, ?VarName) :- hasLocal(?Type, ?VarName).
hasLocal(?Type, ?ChildVar) :- mayCreate(?Type, ?ChildType, ?ChildVar).


/* predicates on objects */

isObject(?X) :- isA(?X, ?Type).
live(?Object) :- initialObject(?Object, ?Type).
isA(?Object, ?Type) :- initialObject(?Object, ?Type).
isA(?NewObject, ?Type) :- newObject(?Object, ?Invocation, ?Type, ?NewObject).


/* predicates on invocations */

live(?Object, ?Invocation) :- initialInvocation(?Object, ?Invocation).
isInvocation(?Invocation) :- initialInvocation(?Object, ?Invocation).

/* If an Invocation has direct access to an object (via a local variable or a field on its object) */
hasRef(?Object, ?Invocation, ?Value) :- value(?Object, ?Invocation, ?AnyVar, ?Value).

/* Every invocation has a 'this' variable with a reference to its object. */
local(?Object, ?Invocation, "this", ?Object) :- isObject(?Object), live(?Object, ?Invocation).

/* Local or field */
value(?Object, ?Invocation, ?Var, ?Value) :- local(?Object, ?Invocation, ?Var, ?Value).
value(?Object, ?Invocation, ?Var, ?Value) :- field(?Object, ?Var, ?Value), isInvocation(?Invocation).


/* Error checking */

error('Not an object (no type!)', ?Object) :- hasRef(?AnyObject, ?X, ?Object), !isObject(?Object).

error('Unknown mayCall target var', ?Type, ?TargetVar) :- mayCall(?Type, ?TargetVar, ?ArgVar, ?ResultVar), !hasVar(?Type, ?TargetVar).
error('Unknown mayCall arg var', ?Type, ?ArgVar) :- mayCall(?Type, ?TargetVar, ?ArgVar, ?ResultVar), !hasVar(?Type, ?ArgVar).
error('Unknown mayCall result var', ?Type, ?ResultVar) :- mayCall(?Type, ?TargetVar, ?ArgVar, ?ResultVar), !hasVar(?Type, ?ResultVar).

error('Unknown mayAccept var', ?Type, ?ArgVar) :- mayAccept(?Type, ?ArgVar), !hasVar(?Type, ?ArgVar).

error('Unknown mayReturn var', ?Type, ?ReturnVar) :- mayReturn(?Type, ?ReturnVar), !hasVar(?Type, ?ReturnVar).

error('Unknown mayCreate local var', ?Type, ?Var) :- mayCreate(?Type, ?ChildType, ?Var), !hasLocal(?Type, ?Var).

error('Live invocation for non-alive object', ?Invocation, ?Object) :-
	live(?Object, ?Invocation), !live(?Object).

error('Unknown source object in deny rule', ?A) :- denyAccess(?A, ?B), !isObject(?A).
error('Unknown target object in deny rule', ?B) :- denyAccess(?A, ?B), !isObject(?B).

haveAccess(?SourceObject, ?TargetObject) :-
	hasRef(?SourceObject, ?AnyInvocation, ?TargetObject).

haveBadAccess(?SourceObject, ?TargetObject) :-
	denyAccess(?SourceObject, ?TargetObject),
	haveAccess(?SourceObject, ?TargetObject).

error('unsafe access may be possible', ?SourceObject, ?TargetObject) :-
	haveBadAccess(?SourceObject, ?TargetObject).

error('Undeclared local', ?Type, ?Var, ?Value) :- local(?Object, ?Invocation, ?Var, ?Value), isA(?Object, ?Type), !hasLocal(?Type, ?Var).
error('Local on non-invocation', ?Invocation, ?Var, ?Value) :- local(?Object, ?Invocation, ?Var, ?Value), !isInvocation(?Invocation).

objectHasField(?Object, ?Field) :- isA(?Object, ?Type), hasField(?Type, ?Field).
error('Undeclared field', ?Object, ?Var, ?Value) :- field(?Object, ?Var, ?Value), !objectHasField(?Object, ?Var).
error('Field on non-object', ?Object, ?Var, ?Value) :- field(?Object, ?Var, ?Value), !isObject(?Object).


/* Unknown behaviour */
hasField("Unknown", "ref").
field(?Object, "ref", ?Object) :- live(?Object), isA(?Object, "Unknown").
mayCall("Unknown", "ref", "ref", "ref").
mayAccept("Unknown", "ref").
mayReturn("Unknown", "ref").
