/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.analysis;

import eu.serscis.sam.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseABehaviourToplevel(ABehaviourToplevel node);
    void caseAImportToplevel(AImportToplevel node);
    void caseAFactToplevel(AFactToplevel node);
    void caseARuleToplevel(ARuleToplevel node);
    void caseADeclareToplevel(ADeclareToplevel node);
    void caseAQueryToplevel(AQueryToplevel node);
    void caseAImport(AImport node);
    void caseADeclare(ADeclare node);
    void caseAFact(AFact node);
    void caseARule(ARule node);
    void caseALiterals(ALiterals node);
    void caseALiteralTail(ALiteralTail node);
    void caseAPositiveLiteral(APositiveLiteral node);
    void caseANegativeLiteral(ANegativeLiteral node);
    void caseANullaryAtom(ANullaryAtom node);
    void caseANormalAtom(ANormalAtom node);
    void caseABuiltinAtom(ABuiltinAtom node);
    void caseATerms(ATerms node);
    void caseATermTail(ATermTail node);
    void caseAVarTerm(AVarTerm node);
    void caseAStringTerm(AStringTerm node);
    void caseACompositeTerm(ACompositeTerm node);
    void caseAQuery(AQuery node);
    void caseANamedPattern(ANamedPattern node);
    void caseAAnyPattern(AAnyPattern node);
    void caseABehaviour(ABehaviour node);
    void caseAExtends(AExtends node);
    void caseAClassBody(AClassBody node);
    void caseAField(AField node);
    void caseAType(AType node);
    void caseAMethod(AMethod node);
    void caseACode(ACode node);
    void caseAAssign(AAssign node);
    void caseAAssignStatement(AAssignStatement node);
    void caseADeclStatement(ADeclStatement node);
    void caseATryStatement(ATryStatement node);
    void caseAThrowStatement(AThrowStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseACatchBlock(ACatchBlock node);
    void caseANewExpr(ANewExpr node);
    void caseACallExpr(ACallExpr node);
    void caseACopyExpr(ACopyExpr node);
    void caseAArgs(AArgs node);
    void caseAArgsTail(AArgsTail node);
    void caseAParam(AParam node);
    void caseAParams(AParams node);
    void caseAParamsTail(AParamsTail node);

    void caseTNumber(TNumber node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTPublicTok(TPublicTok node);
    void caseTPrivateTok(TPrivateTok node);
    void caseTExtendsTok(TExtendsTok node);
    void caseTNew(TNew node);
    void caseTThrow(TThrow node);
    void caseTReturn(TReturn node);
    void caseTClassTok(TClassTok node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTEq(TEq node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseTBlockComment(TBlockComment node);
    void caseTComma(TComma node);
    void caseTGoal(TGoal node);
    void caseTSemi(TSemi node);
    void caseTIfDl(TIfDl node);
    void caseTBang(TBang node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTQueryStart(TQueryStart node);
    void caseTQuestion(TQuestion node);
    void caseTBinop(TBinop node);
    void caseTStar(TStar node);
    void caseTDots(TDots node);
    void caseTDot(TDot node);
    void caseTDeclareTok(TDeclareTok node);
    void caseTImportTok(TImportTok node);
    void caseTTry(TTry node);
    void caseTCatch(TCatch node);
    void caseTName(TName node);
    void caseEOF(EOF node);
}
