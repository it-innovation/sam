/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.parser;

import eu.serscis.sam.lexer.*;
import eu.serscis.sam.node.*;
import eu.serscis.sam.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAbehaviour1Behaviour */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAbehaviour2Behaviour */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce AExtends */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AAclassbody1ClassBody */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce AAclassbody2ClassBody */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce AAclassbody3ClassBody */
		    {
			ArrayList list = new5();
			push(goTo(2), list, false);
		    }
		    break;
                    case 6: /* reduce AAclassbody4ClassBody */
		    {
			ArrayList list = new6();
			push(goTo(2), list, false);
		    }
		    break;
                    case 7: /* reduce AField */
		    {
			ArrayList list = new7();
			push(goTo(3), list, false);
		    }
		    break;
                    case 8: /* reduce AType */
		    {
			ArrayList list = new8();
			push(goTo(4), list, false);
		    }
		    break;
                    case 9: /* reduce AAmethod1Method */
		    {
			ArrayList list = new9();
			push(goTo(5), list, false);
		    }
		    break;
                    case 10: /* reduce AAmethod2Method */
		    {
			ArrayList list = new10();
			push(goTo(5), list, false);
		    }
		    break;
                    case 11: /* reduce AAcode1Code */
		    {
			ArrayList list = new11();
			push(goTo(6), list, false);
		    }
		    break;
                    case 12: /* reduce AAcode2Code */
		    {
			ArrayList list = new12();
			push(goTo(6), list, false);
		    }
		    break;
                    case 13: /* reduce AAassign1Assign */
		    {
			ArrayList list = new13();
			push(goTo(7), list, false);
		    }
		    break;
                    case 14: /* reduce AAassign2Assign */
		    {
			ArrayList list = new14();
			push(goTo(7), list, false);
		    }
		    break;
                    case 15: /* reduce AAassignstatement1Statement */
		    {
			ArrayList list = new15();
			push(goTo(8), list, false);
		    }
		    break;
                    case 16: /* reduce AAassignstatement2Statement */
		    {
			ArrayList list = new16();
			push(goTo(8), list, false);
		    }
		    break;
                    case 17: /* reduce AReturnStatement */
		    {
			ArrayList list = new17();
			push(goTo(8), list, false);
		    }
		    break;
                    case 18: /* reduce AAnewexpr1Expr */
		    {
			ArrayList list = new18();
			push(goTo(9), list, false);
		    }
		    break;
                    case 19: /* reduce AAnewexpr2Expr */
		    {
			ArrayList list = new19();
			push(goTo(9), list, false);
		    }
		    break;
                    case 20: /* reduce AAcallexpr1Expr */
		    {
			ArrayList list = new20();
			push(goTo(9), list, false);
		    }
		    break;
                    case 21: /* reduce AAcallexpr2Expr */
		    {
			ArrayList list = new21();
			push(goTo(9), list, false);
		    }
		    break;
                    case 22: /* reduce AAargs1Args */
		    {
			ArrayList list = new22();
			push(goTo(10), list, false);
		    }
		    break;
                    case 23: /* reduce AAargs2Args */
		    {
			ArrayList list = new23();
			push(goTo(10), list, false);
		    }
		    break;
                    case 24: /* reduce AArgsTail */
		    {
			ArrayList list = new24();
			push(goTo(11), list, false);
		    }
		    break;
                    case 25: /* reduce AParam */
		    {
			ArrayList list = new25();
			push(goTo(12), list, false);
		    }
		    break;
                    case 26: /* reduce AAparams1Params */
		    {
			ArrayList list = new26();
			push(goTo(13), list, false);
		    }
		    break;
                    case 27: /* reduce AAparams2Params */
		    {
			ArrayList list = new27();
			push(goTo(13), list, false);
		    }
		    break;
                    case 28: /* reduce AParamsTail */
		    {
			ArrayList list = new28();
			push(goTo(14), list, false);
		    }
		    break;
                    case 29: /* reduce ATerminal$Field */
		    {
			ArrayList list = new29();
			push(goTo(15), list, true);
		    }
		    break;
                    case 30: /* reduce ANonTerminal$Field */
		    {
			ArrayList list = new30();
			push(goTo(15), list, true);
		    }
		    break;
                    case 31: /* reduce ATerminal$Method */
		    {
			ArrayList list = new31();
			push(goTo(16), list, true);
		    }
		    break;
                    case 32: /* reduce ANonTerminal$Method */
		    {
			ArrayList list = new32();
			push(goTo(16), list, true);
		    }
		    break;
                    case 33: /* reduce ATerminal$Statement */
		    {
			ArrayList list = new33();
			push(goTo(17), list, true);
		    }
		    break;
                    case 34: /* reduce ANonTerminal$Statement */
		    {
			ArrayList list = new34();
			push(goTo(17), list, true);
		    }
		    break;
                    case 35: /* reduce ATerminal$ArgsTail */
		    {
			ArrayList list = new35();
			push(goTo(18), list, true);
		    }
		    break;
                    case 36: /* reduce ANonTerminal$ArgsTail */
		    {
			ArrayList list = new36();
			push(goTo(18), list, true);
		    }
		    break;
                    case 37: /* reduce ATerminal$ParamsTail */
		    {
			ArrayList list = new37();
			push(goTo(19), list, true);
		    }
		    break;
                    case 38: /* reduce ANonTerminal$ParamsTail */
		    {
			ArrayList list = new38();
			push(goTo(19), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PBehaviour node1 = (PBehaviour) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAbehaviour1Behaviour */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBehaviour pbehaviourNode1;
        {
            // Block
        TClassTok tclasstokNode2;
        TName tnameNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TLBrace tlbraceNode5;
        PClassBody pclassbodyNode6;
        TRBrace trbraceNode7;
        tclasstokNode2 = (TClassTok)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tlbraceNode5 = (TLBrace)nodeArrayList3.get(0);
        pclassbodyNode6 = (PClassBody)nodeArrayList4.get(0);
        trbraceNode7 = (TRBrace)nodeArrayList5.get(0);

        pbehaviourNode1 = new ABehaviour(tclasstokNode2, tnameNode3, null, tlbraceNode5, pclassbodyNode6, trbraceNode7);
        }
	nodeList.add(pbehaviourNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAbehaviour2Behaviour */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBehaviour pbehaviourNode1;
        {
            // Block
        TClassTok tclasstokNode2;
        TName tnameNode3;
        PExtends pextendsNode4;
        TLBrace tlbraceNode5;
        PClassBody pclassbodyNode6;
        TRBrace trbraceNode7;
        tclasstokNode2 = (TClassTok)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        pextendsNode4 = (PExtends)nodeArrayList3.get(0);
        tlbraceNode5 = (TLBrace)nodeArrayList4.get(0);
        pclassbodyNode6 = (PClassBody)nodeArrayList5.get(0);
        trbraceNode7 = (TRBrace)nodeArrayList6.get(0);

        pbehaviourNode1 = new ABehaviour(tclasstokNode2, tnameNode3, pextendsNode4, tlbraceNode5, pclassbodyNode6, trbraceNode7);
        }
	nodeList.add(pbehaviourNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AExtends */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExtends pextendsNode1;
        {
            // Block
        TExtendsTok textendstokNode2;
        TName tnameNode3;
        textendstokNode2 = (TExtendsTok)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);

        pextendsNode1 = new AExtends(textendstokNode2, tnameNode3);
        }
	nodeList.add(pextendsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAclassbody1ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        }
        {
            // Block
        }

        pclassbodyNode1 = new AClassBody(listNode2, listNode3);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAclassbody2ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pclassbodyNode1 = new AClassBody(listNode3, listNode4);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAclassbody3ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        }
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pclassbodyNode1 = new AClassBody(listNode2, listNode4);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAclassbody4ClassBody */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassBody pclassbodyNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pclassbodyNode1 = new AClassBody(listNode3, listNode5);
        }
	nodeList.add(pclassbodyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AField */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PField pfieldNode1;
        {
            // Block
        TPrivateTok tprivatetokNode2;
        PType ptypeNode3;
        TName tnameNode4;
        TSemi tsemiNode5;
        tprivatetokNode2 = (TPrivateTok)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tnameNode4 = (TName)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        pfieldNode1 = new AField(tprivatetokNode2, ptypeNode3, tnameNode4, tsemiNode5);
        }
	nodeList.add(pfieldNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TName tnameNode2;
        tnameNode2 = (TName)nodeArrayList1.get(0);

        ptypeNode1 = new AType(tnameNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAmethod1Method */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        TPublicTok tpublictokNode2;
        PType ptypeNode3;
        TName tnameNode4;
        TLPar tlparNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRPar trparNode7;
        TLBrace tlbraceNode8;
        PCode pcodeNode9;
        TRBrace trbraceNode10;
        tpublictokNode2 = (TPublicTok)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tnameNode4 = (TName)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        trparNode7 = (TRPar)nodeArrayList5.get(0);
        tlbraceNode8 = (TLBrace)nodeArrayList6.get(0);
        pcodeNode9 = (PCode)nodeArrayList7.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList8.get(0);

        pmethodNode1 = new AMethod(tpublictokNode2, ptypeNode3, tnameNode4, tlparNode5, null, trparNode7, tlbraceNode8, pcodeNode9, trbraceNode10);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAmethod2Method */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        TPublicTok tpublictokNode2;
        PType ptypeNode3;
        TName tnameNode4;
        TLPar tlparNode5;
        PParams pparamsNode6;
        TRPar trparNode7;
        TLBrace tlbraceNode8;
        PCode pcodeNode9;
        TRBrace trbraceNode10;
        tpublictokNode2 = (TPublicTok)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tnameNode4 = (TName)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pparamsNode6 = (PParams)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);
        tlbraceNode8 = (TLBrace)nodeArrayList7.get(0);
        pcodeNode9 = (PCode)nodeArrayList8.get(0);
        trbraceNode10 = (TRBrace)nodeArrayList9.get(0);

        pmethodNode1 = new AMethod(tpublictokNode2, ptypeNode3, tnameNode4, tlparNode5, pparamsNode6, trparNode7, tlbraceNode8, pcodeNode9, trbraceNode10);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAcode1Code */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PCode pcodeNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pcodeNode1 = new ACode(listNode2);
        }
	nodeList.add(pcodeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAcode2Code */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCode pcodeNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pcodeNode1 = new ACode(listNode3);
        }
	nodeList.add(pcodeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAassign1Assign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssign passignNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TName tnameNode3;
        TEq teqNode4;
        tnameNode3 = (TName)nodeArrayList1.get(0);
        teqNode4 = (TEq)nodeArrayList2.get(0);

        passignNode1 = new AAssign(null, tnameNode3, teqNode4);
        }
	nodeList.add(passignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAassign2Assign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssign passignNode1;
        {
            // Block
        PType ptypeNode2;
        TName tnameNode3;
        TEq teqNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        teqNode4 = (TEq)nodeArrayList3.get(0);

        passignNode1 = new AAssign(ptypeNode2, tnameNode3, teqNode4);
        }
	nodeList.add(passignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAassignstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PExpr pexprNode3;
        TSemi tsemiNode4;
        pexprNode3 = (PExpr)nodeArrayList1.get(0);
        tsemiNode4 = (TSemi)nodeArrayList2.get(0);

        pstatementNode1 = new AAssignStatement(null, pexprNode3, tsemiNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAassignstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PAssign passignNode2;
        PExpr pexprNode3;
        TSemi tsemiNode4;
        passignNode2 = (PAssign)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignStatement(passignNode2, pexprNode3, tsemiNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AReturnStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        TName tnameNode3;
        TSemi tsemiNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pstatementNode1 = new AReturnStatement(treturnNode2, tnameNode3, tsemiNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAnewexpr1Expr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TNew tnewNode2;
        PType ptypeNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);

        pexprNode1 = new ANewExpr(tnewNode2, ptypeNode3, tlparNode4, null, trparNode6);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAnewexpr2Expr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TNew tnewNode2;
        PType ptypeNode3;
        TLPar tlparNode4;
        PArgs pargsNode5;
        TRPar trparNode6;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pargsNode5 = (PArgs)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        pexprNode1 = new ANewExpr(tnewNode2, ptypeNode3, tlparNode4, pargsNode5, trparNode6);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAcallexpr1Expr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TName tnameNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pexprNode1 = new ACallExpr(tnameNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAcallexpr2Expr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TName tnameNode2;
        TLPar tlparNode3;
        PArgs pargsNode4;
        TRPar trparNode5;
        tnameNode2 = (TName)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargsNode4 = (PArgs)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pexprNode1 = new ACallExpr(tnameNode2, tlparNode3, pargsNode4, trparNode5);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AAargs1Args */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        TName tnameNode2;
        LinkedList listNode3 = new LinkedList();
        tnameNode2 = (TName)nodeArrayList1.get(0);
        {
            // Block
        }

        pargsNode1 = new AArgs(tnameNode2, listNode3);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAargs2Args */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        TName tnameNode2;
        LinkedList listNode4 = new LinkedList();
        tnameNode2 = (TName)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pargsNode1 = new AArgs(tnameNode2, listNode4);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AArgsTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgsTail pargstailNode1;
        {
            // Block
        TComma tcommaNode2;
        TName tnameNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);

        pargstailNode1 = new AArgsTail(tcommaNode2, tnameNode3);
        }
	nodeList.add(pargstailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AParam */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        PType ptypeNode2;
        TName tnameNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tnameNode3 = (TName)nodeArrayList2.get(0);

        pparamNode1 = new AParam(ptypeNode2, tnameNode3);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AAparams1Params */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        PParam pparamNode2;
        LinkedList listNode3 = new LinkedList();
        pparamNode2 = (PParam)nodeArrayList1.get(0);
        {
            // Block
        }

        pparamsNode1 = new AParams(pparamNode2, listNode3);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AAparams2Params */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        PParam pparamNode2;
        LinkedList listNode4 = new LinkedList();
        pparamNode2 = (PParam)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparamsNode1 = new AParams(pparamNode2, listNode4);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AParamsTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamsTail pparamstailNode1;
        {
            // Block
        TComma tcommaNode2;
        PParam pparamNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pparamNode3 = (PParam)nodeArrayList2.get(0);

        pparamstailNode1 = new AParamsTail(tcommaNode2, pparamNode3);
        }
	nodeList.add(pparamstailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ATerminal$Field */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PField pfieldNode1;
        pfieldNode1 = (PField)nodeArrayList1.get(0);
	if(pfieldNode1 != null)
	{
	  listNode2.add(pfieldNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ANonTerminal$Field */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PField pfieldNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfieldNode2 = (PField)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfieldNode2 != null)
	{
	  listNode3.add(pfieldNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ATerminal$Method */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMethod pmethodNode1;
        pmethodNode1 = (PMethod)nodeArrayList1.get(0);
	if(pmethodNode1 != null)
	{
	  listNode2.add(pmethodNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ANonTerminal$Method */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMethod pmethodNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethodNode2 = (PMethod)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethodNode2 != null)
	{
	  listNode3.add(pmethodNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ATerminal$ArgsTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PArgsTail pargstailNode1;
        pargstailNode1 = (PArgsTail)nodeArrayList1.get(0);
	if(pargstailNode1 != null)
	{
	  listNode2.add(pargstailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ANonTerminal$ArgsTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PArgsTail pargstailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargstailNode2 = (PArgsTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargstailNode2 != null)
	{
	  listNode3.add(pargstailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ATerminal$ParamsTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PParamsTail pparamstailNode1;
        pparamstailNode1 = (PParamsTail)nodeArrayList1.get(0);
	if(pparamstailNode1 != null)
	{
	  listNode2.add(pparamstailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ANonTerminal$ParamsTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PParamsTail pparamstailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparamstailNode2 = (PParamsTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparamstailNode2 != null)
	{
	  listNode3.add(pparamstailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {8, SHIFT, 1}, },
			{{-1, ERROR, 1}, {15, SHIFT, 3}, },
			{{-1, ERROR, 2}, {16, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {5, SHIFT, 4}, {9, SHIFT, 5}, },
			{{-1, ERROR, 4}, {15, SHIFT, 7}, },
			{{-1, REDUCE, 3}, {3, SHIFT, 8}, {4, SHIFT, 9}, },
			{{-1, ERROR, 6}, {9, SHIFT, 15}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 8}, {15, SHIFT, 16}, },
			{{-1, ERROR, 9}, {15, SHIFT, 16}, },
			{{-1, ERROR, 10}, {10, SHIFT, 19}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 4}, {3, SHIFT, 8}, {4, SHIFT, 9}, },
			{{-1, REDUCE, 5}, {3, SHIFT, 8}, },
			{{-1, REDUCE, 3}, {3, SHIFT, 8}, {4, SHIFT, 9}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 17}, {15, SHIFT, 24}, },
			{{-1, ERROR, 18}, {15, SHIFT, 25}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 6}, {3, SHIFT, 8}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 23}, {10, SHIFT, 26}, },
			{{-1, ERROR, 24}, {1, SHIFT, 27}, },
			{{-1, ERROR, 25}, {14, SHIFT, 28}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 27}, {2, SHIFT, 29}, {15, SHIFT, 16}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 29}, {9, SHIFT, 33}, },
			{{-1, ERROR, 30}, {15, SHIFT, 34}, },
			{{-1, REDUCE, 26}, {12, SHIFT, 35}, },
			{{-1, ERROR, 32}, {2, SHIFT, 38}, },
			{{-1, REDUCE, 11}, {6, SHIFT, 39}, {7, SHIFT, 40}, {15, SHIFT, 41}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 35}, {15, SHIFT, 16}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 27}, {12, SHIFT, 35}, },
			{{-1, ERROR, 38}, {9, SHIFT, 50}, },
			{{-1, ERROR, 39}, {15, SHIFT, 16}, },
			{{-1, ERROR, 40}, {15, SHIFT, 52}, },
			{{-1, REDUCE, 8}, {1, SHIFT, 53}, {11, SHIFT, 54}, },
			{{-1, ERROR, 42}, {15, SHIFT, 55}, },
			{{-1, ERROR, 43}, {10, SHIFT, 56}, },
			{{-1, ERROR, 44}, {6, SHIFT, 39}, {15, SHIFT, 57}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 46}, {14, SHIFT, 59}, },
			{{-1, REDUCE, 12}, {6, SHIFT, 39}, {7, SHIFT, 40}, {15, SHIFT, 41}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 11}, {6, SHIFT, 39}, {7, SHIFT, 40}, {15, SHIFT, 41}, },
			{{-1, ERROR, 51}, {1, SHIFT, 62}, },
			{{-1, ERROR, 52}, {14, SHIFT, 63}, },
			{{-1, ERROR, 53}, {2, SHIFT, 64}, {15, SHIFT, 65}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 55}, {11, SHIFT, 67}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 57}, {1, SHIFT, 53}, },
			{{-1, ERROR, 58}, {14, SHIFT, 68}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 61}, {10, SHIFT, 69}, },
			{{-1, ERROR, 62}, {2, SHIFT, 70}, {15, SHIFT, 65}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 22}, {12, SHIFT, 72}, },
			{{-1, ERROR, 66}, {2, SHIFT, 75}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 71}, {2, SHIFT, 76}, },
			{{-1, ERROR, 72}, {15, SHIFT, 77}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 23}, {12, SHIFT, 72}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 36}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 6}, },
			{{-1, 10}, {15, 23}, },
			{{-1, 11}, {13, 20}, },
			{{-1, 42}, {8, 17}, {9, 18}, {27, 30}, {35, 30}, {39, 51}, },
			{{-1, 12}, {14, 22}, {21, 22}, },
			{{-1, 43}, {50, 61}, },
			{{-1, 44}, },
			{{-1, 45}, {47, 60}, },
			{{-1, 46}, {44, 58}, },
			{{-1, 66}, {62, 71}, },
			{{-1, 73}, {74, 78}, },
			{{-1, 31}, {35, 48}, },
			{{-1, 32}, },
			{{-1, 36}, {37, 49}, },
			{{-1, 13}, },
			{{-1, 14}, {13, 21}, },
			{{-1, 47}, },
			{{-1, 74}, },
			{{-1, 37}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class'",
			"expecting: name",
			"expecting: EOF",
			"expecting: 'extends', '{'",
			"expecting: 'public', 'private', '}'",
			"expecting: '{'",
			"expecting: '}'",
			"expecting: 'public', '}'",
			"expecting: '(', name",
			"expecting: '('",
			"expecting: ';'",
			"expecting: ')', name",
			"expecting: ')', ','",
			"expecting: ')'",
			"expecting: 'new', 'return', '}', name",
			"expecting: '(', '=', name",
			"expecting: 'new', name",
			"expecting: '='",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 1, 4, 5, 5, 1, 1, 6, 4, 7, 4, 7, 4, 8, 1, 1, 2, 4, 7, 7, 6, 9, 10, 2, 11, 4, 5, 1, 12, 13, 14, 12, 1, 12, 12, 5, 1, 1, 15, 1, 6, 16, 14, 10, 14, 12, 12, 14, 9, 10, 11, 16, 17, 7, 9, 10, 14, 14, 6, 11, 14, 10, 12, 13, 16, 14, 7, 10, 13, 1, 12, 12, 10, 10, 12, 12, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
