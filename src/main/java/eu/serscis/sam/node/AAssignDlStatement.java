/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class AAssignDlStatement extends PStatement
{
    private PAssign _assign_;
    private PTerm _term_;
    private TIfDl _ifDl_;
    private PLiterals _literals_;
    private TSemi _semi_;

    public AAssignDlStatement()
    {
        // Constructor
    }

    public AAssignDlStatement(
        @SuppressWarnings("hiding") PAssign _assign_,
        @SuppressWarnings("hiding") PTerm _term_,
        @SuppressWarnings("hiding") TIfDl _ifDl_,
        @SuppressWarnings("hiding") PLiterals _literals_,
        @SuppressWarnings("hiding") TSemi _semi_)
    {
        // Constructor
        setAssign(_assign_);

        setTerm(_term_);

        setIfDl(_ifDl_);

        setLiterals(_literals_);

        setSemi(_semi_);

    }

    @Override
    public Object clone()
    {
        return new AAssignDlStatement(
            cloneNode(this._assign_),
            cloneNode(this._term_),
            cloneNode(this._ifDl_),
            cloneNode(this._literals_),
            cloneNode(this._semi_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssignDlStatement(this);
    }

    public PAssign getAssign()
    {
        return this._assign_;
    }

    public void setAssign(PAssign node)
    {
        if(this._assign_ != null)
        {
            this._assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assign_ = node;
    }

    public PTerm getTerm()
    {
        return this._term_;
    }

    public void setTerm(PTerm node)
    {
        if(this._term_ != null)
        {
            this._term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term_ = node;
    }

    public TIfDl getIfDl()
    {
        return this._ifDl_;
    }

    public void setIfDl(TIfDl node)
    {
        if(this._ifDl_ != null)
        {
            this._ifDl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifDl_ = node;
    }

    public PLiterals getLiterals()
    {
        return this._literals_;
    }

    public void setLiterals(PLiterals node)
    {
        if(this._literals_ != null)
        {
            this._literals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._literals_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._assign_)
            + toString(this._term_)
            + toString(this._ifDl_)
            + toString(this._literals_)
            + toString(this._semi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._assign_ == child)
        {
            this._assign_ = null;
            return;
        }

        if(this._term_ == child)
        {
            this._term_ = null;
            return;
        }

        if(this._ifDl_ == child)
        {
            this._ifDl_ = null;
            return;
        }

        if(this._literals_ == child)
        {
            this._literals_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._assign_ == oldChild)
        {
            setAssign((PAssign) newChild);
            return;
        }

        if(this._term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        if(this._ifDl_ == oldChild)
        {
            setIfDl((TIfDl) newChild);
            return;
        }

        if(this._literals_ == oldChild)
        {
            setLiterals((PLiterals) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
