/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class ARule extends PRule
{
    private PAtom _head_;
    private TIfDl _ifDl_;
    private PLiterals _body_;
    private TDot _dot_;

    public ARule()
    {
        // Constructor
    }

    public ARule(
        @SuppressWarnings("hiding") PAtom _head_,
        @SuppressWarnings("hiding") TIfDl _ifDl_,
        @SuppressWarnings("hiding") PLiterals _body_,
        @SuppressWarnings("hiding") TDot _dot_)
    {
        // Constructor
        setHead(_head_);

        setIfDl(_ifDl_);

        setBody(_body_);

        setDot(_dot_);

    }

    @Override
    public Object clone()
    {
        return new ARule(
            cloneNode(this._head_),
            cloneNode(this._ifDl_),
            cloneNode(this._body_),
            cloneNode(this._dot_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARule(this);
    }

    public PAtom getHead()
    {
        return this._head_;
    }

    public void setHead(PAtom node)
    {
        if(this._head_ != null)
        {
            this._head_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._head_ = node;
    }

    public TIfDl getIfDl()
    {
        return this._ifDl_;
    }

    public void setIfDl(TIfDl node)
    {
        if(this._ifDl_ != null)
        {
            this._ifDl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifDl_ = node;
    }

    public PLiterals getBody()
    {
        return this._body_;
    }

    public void setBody(PLiterals node)
    {
        if(this._body_ != null)
        {
            this._body_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._body_ = node;
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._head_)
            + toString(this._ifDl_)
            + toString(this._body_)
            + toString(this._dot_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._head_ == child)
        {
            this._head_ = null;
            return;
        }

        if(this._ifDl_ == child)
        {
            this._ifDl_ = null;
            return;
        }

        if(this._body_ == child)
        {
            this._body_ = null;
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._head_ == oldChild)
        {
            setHead((PAtom) newChild);
            return;
        }

        if(this._ifDl_ == oldChild)
        {
            setIfDl((TIfDl) newChild);
            return;
        }

        if(this._body_ == oldChild)
        {
            setBody((PLiterals) newChild);
            return;
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
