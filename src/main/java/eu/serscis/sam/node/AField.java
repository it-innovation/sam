/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class AField extends PField
{
    private TPrivateTok _privateTok_;
    private PType _type_;
    private TName _name_;
    private TSemi _semi_;

    public AField()
    {
        // Constructor
    }

    public AField(
        @SuppressWarnings("hiding") TPrivateTok _privateTok_,
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") TName _name_,
        @SuppressWarnings("hiding") TSemi _semi_)
    {
        // Constructor
        setPrivateTok(_privateTok_);

        setType(_type_);

        setName(_name_);

        setSemi(_semi_);

    }

    @Override
    public Object clone()
    {
        return new AField(
            cloneNode(this._privateTok_),
            cloneNode(this._type_),
            cloneNode(this._name_),
            cloneNode(this._semi_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAField(this);
    }

    public TPrivateTok getPrivateTok()
    {
        return this._privateTok_;
    }

    public void setPrivateTok(TPrivateTok node)
    {
        if(this._privateTok_ != null)
        {
            this._privateTok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._privateTok_ = node;
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public TName getName()
    {
        return this._name_;
    }

    public void setName(TName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._privateTok_)
            + toString(this._type_)
            + toString(this._name_)
            + toString(this._semi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._privateTok_ == child)
        {
            this._privateTok_ = null;
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._privateTok_ == oldChild)
        {
            setPrivateTok((TPrivateTok) newChild);
            return;
        }

        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
