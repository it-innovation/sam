/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class AArgsAnnotation extends PAnnotation
{
    private TAtTok _atTok_;
    private TName _name_;
    private TLPar _lPar_;
    private PStringArgs _stringArgs_;
    private TRPar _rPar_;

    public AArgsAnnotation()
    {
        // Constructor
    }

    public AArgsAnnotation(
        @SuppressWarnings("hiding") TAtTok _atTok_,
        @SuppressWarnings("hiding") TName _name_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PStringArgs _stringArgs_,
        @SuppressWarnings("hiding") TRPar _rPar_)
    {
        // Constructor
        setAtTok(_atTok_);

        setName(_name_);

        setLPar(_lPar_);

        setStringArgs(_stringArgs_);

        setRPar(_rPar_);

    }

    @Override
    public Object clone()
    {
        return new AArgsAnnotation(
            cloneNode(this._atTok_),
            cloneNode(this._name_),
            cloneNode(this._lPar_),
            cloneNode(this._stringArgs_),
            cloneNode(this._rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgsAnnotation(this);
    }

    public TAtTok getAtTok()
    {
        return this._atTok_;
    }

    public void setAtTok(TAtTok node)
    {
        if(this._atTok_ != null)
        {
            this._atTok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._atTok_ = node;
    }

    public TName getName()
    {
        return this._name_;
    }

    public void setName(TName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PStringArgs getStringArgs()
    {
        return this._stringArgs_;
    }

    public void setStringArgs(PStringArgs node)
    {
        if(this._stringArgs_ != null)
        {
            this._stringArgs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stringArgs_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._atTok_)
            + toString(this._name_)
            + toString(this._lPar_)
            + toString(this._stringArgs_)
            + toString(this._rPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._atTok_ == child)
        {
            this._atTok_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._stringArgs_ == child)
        {
            this._stringArgs_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._atTok_ == oldChild)
        {
            setAtTok((TAtTok) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._stringArgs_ == oldChild)
        {
            setStringArgs((PStringArgs) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
