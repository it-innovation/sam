/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import java.util.*;
import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class ALiterals extends PLiterals
{
    private PLiteral _literal_;
    private final LinkedList<PLiteralTail> _literalTail_ = new LinkedList<PLiteralTail>();

    public ALiterals()
    {
        // Constructor
    }

    public ALiterals(
        @SuppressWarnings("hiding") PLiteral _literal_,
        @SuppressWarnings("hiding") List<PLiteralTail> _literalTail_)
    {
        // Constructor
        setLiteral(_literal_);

        setLiteralTail(_literalTail_);

    }

    @Override
    public Object clone()
    {
        return new ALiterals(
            cloneNode(this._literal_),
            cloneList(this._literalTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALiterals(this);
    }

    public PLiteral getLiteral()
    {
        return this._literal_;
    }

    public void setLiteral(PLiteral node)
    {
        if(this._literal_ != null)
        {
            this._literal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._literal_ = node;
    }

    public LinkedList<PLiteralTail> getLiteralTail()
    {
        return this._literalTail_;
    }

    public void setLiteralTail(List<PLiteralTail> list)
    {
        this._literalTail_.clear();
        this._literalTail_.addAll(list);
        for(PLiteralTail e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._literal_)
            + toString(this._literalTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._literal_ == child)
        {
            this._literal_ = null;
            return;
        }

        if(this._literalTail_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._literal_ == oldChild)
        {
            setLiteral((PLiteral) newChild);
            return;
        }

        for(ListIterator<PLiteralTail> i = this._literalTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PLiteralTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
