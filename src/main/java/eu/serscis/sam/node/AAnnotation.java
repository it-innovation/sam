/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class AAnnotation extends PAnnotation
{
    private TAtTok _atTok_;
    private TName _name_;

    public AAnnotation()
    {
        // Constructor
    }

    public AAnnotation(
        @SuppressWarnings("hiding") TAtTok _atTok_,
        @SuppressWarnings("hiding") TName _name_)
    {
        // Constructor
        setAtTok(_atTok_);

        setName(_name_);

    }

    @Override
    public Object clone()
    {
        return new AAnnotation(
            cloneNode(this._atTok_),
            cloneNode(this._name_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAnnotation(this);
    }

    public TAtTok getAtTok()
    {
        return this._atTok_;
    }

    public void setAtTok(TAtTok node)
    {
        if(this._atTok_ != null)
        {
            this._atTok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._atTok_ = node;
    }

    public TName getName()
    {
        return this._name_;
    }

    public void setName(TName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._atTok_)
            + toString(this._name_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._atTok_ == child)
        {
            this._atTok_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._atTok_ == oldChild)
        {
            setAtTok((TAtTok) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
