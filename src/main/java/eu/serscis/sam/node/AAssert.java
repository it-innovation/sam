/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class AAssert extends PAssert
{
    private TAssertTok _assertTok_;
    private PLiterals _literals_;
    private TDot _dot_;

    public AAssert()
    {
        // Constructor
    }

    public AAssert(
        @SuppressWarnings("hiding") TAssertTok _assertTok_,
        @SuppressWarnings("hiding") PLiterals _literals_,
        @SuppressWarnings("hiding") TDot _dot_)
    {
        // Constructor
        setAssertTok(_assertTok_);

        setLiterals(_literals_);

        setDot(_dot_);

    }

    @Override
    public Object clone()
    {
        return new AAssert(
            cloneNode(this._assertTok_),
            cloneNode(this._literals_),
            cloneNode(this._dot_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssert(this);
    }

    public TAssertTok getAssertTok()
    {
        return this._assertTok_;
    }

    public void setAssertTok(TAssertTok node)
    {
        if(this._assertTok_ != null)
        {
            this._assertTok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assertTok_ = node;
    }

    public PLiterals getLiterals()
    {
        return this._literals_;
    }

    public void setLiterals(PLiterals node)
    {
        if(this._literals_ != null)
        {
            this._literals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._literals_ = node;
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._assertTok_)
            + toString(this._literals_)
            + toString(this._dot_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._assertTok_ == child)
        {
            this._assertTok_ = null;
            return;
        }

        if(this._literals_ == child)
        {
            this._literals_ = null;
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._assertTok_ == oldChild)
        {
            setAssertTok((TAssertTok) newChild);
            return;
        }

        if(this._literals_ == oldChild)
        {
            setLiterals((PLiterals) newChild);
            return;
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
