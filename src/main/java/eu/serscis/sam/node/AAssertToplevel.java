/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class AAssertToplevel extends PToplevel
{
    private PAssert _assert_;

    public AAssertToplevel()
    {
        // Constructor
    }

    public AAssertToplevel(
        @SuppressWarnings("hiding") PAssert _assert_)
    {
        // Constructor
        setAssert(_assert_);

    }

    @Override
    public Object clone()
    {
        return new AAssertToplevel(
            cloneNode(this._assert_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssertToplevel(this);
    }

    public PAssert getAssert()
    {
        return this._assert_;
    }

    public void setAssert(PAssert node)
    {
        if(this._assert_ != null)
        {
            this._assert_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assert_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._assert_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._assert_ == child)
        {
            this._assert_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._assert_ == oldChild)
        {
            setAssert((PAssert) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
