/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import java.util.*;
import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class AParams extends PParams
{
    private PParam _param_;
    private final LinkedList<PParamsTail> _paramsTail_ = new LinkedList<PParamsTail>();

    public AParams()
    {
        // Constructor
    }

    public AParams(
        @SuppressWarnings("hiding") PParam _param_,
        @SuppressWarnings("hiding") List<PParamsTail> _paramsTail_)
    {
        // Constructor
        setParam(_param_);

        setParamsTail(_paramsTail_);

    }

    @Override
    public Object clone()
    {
        return new AParams(
            cloneNode(this._param_),
            cloneList(this._paramsTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParams(this);
    }

    public PParam getParam()
    {
        return this._param_;
    }

    public void setParam(PParam node)
    {
        if(this._param_ != null)
        {
            this._param_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._param_ = node;
    }

    public LinkedList<PParamsTail> getParamsTail()
    {
        return this._paramsTail_;
    }

    public void setParamsTail(List<PParamsTail> list)
    {
        this._paramsTail_.clear();
        this._paramsTail_.addAll(list);
        for(PParamsTail e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._param_)
            + toString(this._paramsTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._param_ == child)
        {
            this._param_ = null;
            return;
        }

        if(this._paramsTail_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._param_ == oldChild)
        {
            setParam((PParam) newChild);
            return;
        }

        for(ListIterator<PParamsTail> i = this._paramsTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParamsTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
