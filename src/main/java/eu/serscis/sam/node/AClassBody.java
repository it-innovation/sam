/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import java.util.*;
import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class AClassBody extends PClassBody
{
    private final LinkedList<PField> _field_ = new LinkedList<PField>();
    private final LinkedList<PMethod> _method_ = new LinkedList<PMethod>();

    public AClassBody()
    {
        // Constructor
    }

    public AClassBody(
        @SuppressWarnings("hiding") List<PField> _field_,
        @SuppressWarnings("hiding") List<PMethod> _method_)
    {
        // Constructor
        setField(_field_);

        setMethod(_method_);

    }

    @Override
    public Object clone()
    {
        return new AClassBody(
            cloneList(this._field_),
            cloneList(this._method_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassBody(this);
    }

    public LinkedList<PField> getField()
    {
        return this._field_;
    }

    public void setField(List<PField> list)
    {
        this._field_.clear();
        this._field_.addAll(list);
        for(PField e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PMethod> getMethod()
    {
        return this._method_;
    }

    public void setMethod(List<PMethod> list)
    {
        this._method_.clear();
        this._method_.addAll(list);
        for(PMethod e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._field_)
            + toString(this._method_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._field_.remove(child))
        {
            return;
        }

        if(this._method_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PField> i = this._field_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PField) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PMethod> i = this._method_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethod) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
