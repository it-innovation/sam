/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class ANegativeLiteral extends PLiteral
{
    private TBang _bang_;
    private PAtom _atom_;

    public ANegativeLiteral()
    {
        // Constructor
    }

    public ANegativeLiteral(
        @SuppressWarnings("hiding") TBang _bang_,
        @SuppressWarnings("hiding") PAtom _atom_)
    {
        // Constructor
        setBang(_bang_);

        setAtom(_atom_);

    }

    @Override
    public Object clone()
    {
        return new ANegativeLiteral(
            cloneNode(this._bang_),
            cloneNode(this._atom_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANegativeLiteral(this);
    }

    public TBang getBang()
    {
        return this._bang_;
    }

    public void setBang(TBang node)
    {
        if(this._bang_ != null)
        {
            this._bang_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bang_ = node;
    }

    public PAtom getAtom()
    {
        return this._atom_;
    }

    public void setAtom(PAtom node)
    {
        if(this._atom_ != null)
        {
            this._atom_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._atom_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._bang_)
            + toString(this._atom_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._bang_ == child)
        {
            this._bang_ = null;
            return;
        }

        if(this._atom_ == child)
        {
            this._atom_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._bang_ == oldChild)
        {
            setBang((TBang) newChild);
            return;
        }

        if(this._atom_ == oldChild)
        {
            setAtom((PAtom) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
