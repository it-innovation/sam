/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import java.util.*;
import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class AStringArgs extends PStringArgs
{
    private TStringLiteral _stringLiteral_;
    private final LinkedList<PStringArgsTail> _stringArgsTail_ = new LinkedList<PStringArgsTail>();

    public AStringArgs()
    {
        // Constructor
    }

    public AStringArgs(
        @SuppressWarnings("hiding") TStringLiteral _stringLiteral_,
        @SuppressWarnings("hiding") List<PStringArgsTail> _stringArgsTail_)
    {
        // Constructor
        setStringLiteral(_stringLiteral_);

        setStringArgsTail(_stringArgsTail_);

    }

    @Override
    public Object clone()
    {
        return new AStringArgs(
            cloneNode(this._stringLiteral_),
            cloneList(this._stringArgsTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStringArgs(this);
    }

    public TStringLiteral getStringLiteral()
    {
        return this._stringLiteral_;
    }

    public void setStringLiteral(TStringLiteral node)
    {
        if(this._stringLiteral_ != null)
        {
            this._stringLiteral_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stringLiteral_ = node;
    }

    public LinkedList<PStringArgsTail> getStringArgsTail()
    {
        return this._stringArgsTail_;
    }

    public void setStringArgsTail(List<PStringArgsTail> list)
    {
        this._stringArgsTail_.clear();
        this._stringArgsTail_.addAll(list);
        for(PStringArgsTail e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._stringLiteral_)
            + toString(this._stringArgsTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._stringLiteral_ == child)
        {
            this._stringLiteral_ = null;
            return;
        }

        if(this._stringArgsTail_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._stringLiteral_ == oldChild)
        {
            setStringLiteral((TStringLiteral) newChild);
            return;
        }

        for(ListIterator<PStringArgsTail> i = this._stringArgsTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStringArgsTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
