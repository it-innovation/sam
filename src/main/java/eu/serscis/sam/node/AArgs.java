/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import java.util.*;
import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class AArgs extends PArgs
{
    private PExpr _expr_;
    private final LinkedList<PArgsTail> _argsTail_ = new LinkedList<PArgsTail>();

    public AArgs()
    {
        // Constructor
    }

    public AArgs(
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") List<PArgsTail> _argsTail_)
    {
        // Constructor
        setExpr(_expr_);

        setArgsTail(_argsTail_);

    }

    @Override
    public Object clone()
    {
        return new AArgs(
            cloneNode(this._expr_),
            cloneList(this._argsTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgs(this);
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public LinkedList<PArgsTail> getArgsTail()
    {
        return this._argsTail_;
    }

    public void setArgsTail(List<PArgsTail> list)
    {
        this._argsTail_.clear();
        this._argsTail_.addAll(list);
        for(PArgsTail e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expr_)
            + toString(this._argsTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._argsTail_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        for(ListIterator<PArgsTail> i = this._argsTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PArgsTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
