/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import java.util.*;
import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class ATryStatement extends PStatement
{
    private TTry _try_;
    private TLBrace _lBrace_;
    private final LinkedList<PStatement> _statement_ = new LinkedList<PStatement>();
    private TRBrace _rBrace_;
    private final LinkedList<PCatchBlock> _catchBlock_ = new LinkedList<PCatchBlock>();

    public ATryStatement()
    {
        // Constructor
    }

    public ATryStatement(
        @SuppressWarnings("hiding") TTry _try_,
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") List<PStatement> _statement_,
        @SuppressWarnings("hiding") TRBrace _rBrace_,
        @SuppressWarnings("hiding") List<PCatchBlock> _catchBlock_)
    {
        // Constructor
        setTry(_try_);

        setLBrace(_lBrace_);

        setStatement(_statement_);

        setRBrace(_rBrace_);

        setCatchBlock(_catchBlock_);

    }

    @Override
    public Object clone()
    {
        return new ATryStatement(
            cloneNode(this._try_),
            cloneNode(this._lBrace_),
            cloneList(this._statement_),
            cloneNode(this._rBrace_),
            cloneList(this._catchBlock_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATryStatement(this);
    }

    public TTry getTry()
    {
        return this._try_;
    }

    public void setTry(TTry node)
    {
        if(this._try_ != null)
        {
            this._try_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._try_ = node;
    }

    public TLBrace getLBrace()
    {
        return this._lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(this._lBrace_ != null)
        {
            this._lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrace_ = node;
    }

    public LinkedList<PStatement> getStatement()
    {
        return this._statement_;
    }

    public void setStatement(List<PStatement> list)
    {
        this._statement_.clear();
        this._statement_.addAll(list);
        for(PStatement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRBrace getRBrace()
    {
        return this._rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(this._rBrace_ != null)
        {
            this._rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrace_ = node;
    }

    public LinkedList<PCatchBlock> getCatchBlock()
    {
        return this._catchBlock_;
    }

    public void setCatchBlock(List<PCatchBlock> list)
    {
        this._catchBlock_.clear();
        this._catchBlock_.addAll(list);
        for(PCatchBlock e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._try_)
            + toString(this._lBrace_)
            + toString(this._statement_)
            + toString(this._rBrace_)
            + toString(this._catchBlock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._try_ == child)
        {
            this._try_ = null;
            return;
        }

        if(this._lBrace_ == child)
        {
            this._lBrace_ = null;
            return;
        }

        if(this._statement_.remove(child))
        {
            return;
        }

        if(this._rBrace_ == child)
        {
            this._rBrace_ = null;
            return;
        }

        if(this._catchBlock_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._try_ == oldChild)
        {
            setTry((TTry) newChild);
            return;
        }

        if(this._lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        for(ListIterator<PStatement> i = this._statement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

        for(ListIterator<PCatchBlock> i = this._catchBlock_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCatchBlock) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
