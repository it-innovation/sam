/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class AImport extends PImport
{
    private TImportTok _importTok_;
    private TStringLiteral _stringLiteral_;
    private TDot _dot_;

    public AImport()
    {
        // Constructor
    }

    public AImport(
        @SuppressWarnings("hiding") TImportTok _importTok_,
        @SuppressWarnings("hiding") TStringLiteral _stringLiteral_,
        @SuppressWarnings("hiding") TDot _dot_)
    {
        // Constructor
        setImportTok(_importTok_);

        setStringLiteral(_stringLiteral_);

        setDot(_dot_);

    }

    @Override
    public Object clone()
    {
        return new AImport(
            cloneNode(this._importTok_),
            cloneNode(this._stringLiteral_),
            cloneNode(this._dot_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAImport(this);
    }

    public TImportTok getImportTok()
    {
        return this._importTok_;
    }

    public void setImportTok(TImportTok node)
    {
        if(this._importTok_ != null)
        {
            this._importTok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._importTok_ = node;
    }

    public TStringLiteral getStringLiteral()
    {
        return this._stringLiteral_;
    }

    public void setStringLiteral(TStringLiteral node)
    {
        if(this._stringLiteral_ != null)
        {
            this._stringLiteral_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stringLiteral_ = node;
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._importTok_)
            + toString(this._stringLiteral_)
            + toString(this._dot_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._importTok_ == child)
        {
            this._importTok_ = null;
            return;
        }

        if(this._stringLiteral_ == child)
        {
            this._stringLiteral_ = null;
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._importTok_ == oldChild)
        {
            setImportTok((TImportTok) newChild);
            return;
        }

        if(this._stringLiteral_ == oldChild)
        {
            setStringLiteral((TStringLiteral) newChild);
            return;
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
