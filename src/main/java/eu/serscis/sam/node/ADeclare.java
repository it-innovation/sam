/* This file was generated by SableCC (http://www.sablecc.org/). */

package eu.serscis.sam.node;

import eu.serscis.sam.analysis.*;

@SuppressWarnings("nls")
public final class ADeclare extends PDeclare
{
    private TDeclareTok _declareTok_;
    private PAtom _atom_;
    private TDot _dot_;

    public ADeclare()
    {
        // Constructor
    }

    public ADeclare(
        @SuppressWarnings("hiding") TDeclareTok _declareTok_,
        @SuppressWarnings("hiding") PAtom _atom_,
        @SuppressWarnings("hiding") TDot _dot_)
    {
        // Constructor
        setDeclareTok(_declareTok_);

        setAtom(_atom_);

        setDot(_dot_);

    }

    @Override
    public Object clone()
    {
        return new ADeclare(
            cloneNode(this._declareTok_),
            cloneNode(this._atom_),
            cloneNode(this._dot_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclare(this);
    }

    public TDeclareTok getDeclareTok()
    {
        return this._declareTok_;
    }

    public void setDeclareTok(TDeclareTok node)
    {
        if(this._declareTok_ != null)
        {
            this._declareTok_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._declareTok_ = node;
    }

    public PAtom getAtom()
    {
        return this._atom_;
    }

    public void setAtom(PAtom node)
    {
        if(this._atom_ != null)
        {
            this._atom_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._atom_ = node;
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._declareTok_)
            + toString(this._atom_)
            + toString(this._dot_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._declareTok_ == child)
        {
            this._declareTok_ = null;
            return;
        }

        if(this._atom_ == child)
        {
            this._atom_ = null;
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._declareTok_ == oldChild)
        {
            setDeclareTok((TDeclareTok) newChild);
            return;
        }

        if(this._atom_ == oldChild)
        {
            setAtom((PAtom) newChild);
            return;
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
