class Any {
    public void *(Object foo) {
        foo.*(this);
    }
}

class TwoArgs {
    public void test(Object a, Object b) {
        b.foo();
    }
}

class Underlying {
	public void get() {}
	public void put() {}
}

class Caller {
	public void test(Ref target) {
		target.get();
	}
}

class Proxy {
	private Ref myUnderlying;

	public Proxy(Ref underlying) {
		myUnderlying = underlying;
	}

	public void $method() {
		myUnderlying.$method();
	}
}

config {
    test {
        Object matcher = new Any();
        Object target = new Unknown();
        matcher.foo(target);

        // a should itself to twoArgs so that
        // twoArgs invokes it
        Object a = new Unknown();
        Object twoArgs = new TwoArgs();
        a.process(twoArgs);

	Ref underlying = new Underlying();
	Ref proxy1 = new Proxy(underlying);
	Ref proxy2 = new Proxy(proxy1);
	Ref caller = new Caller();
	caller.test(proxy2);
    }
}

assert getsAccess(<target>, <matcher>).
assert didCall(<twoArgs>, <a>, ?Method).

assert didCall(<proxy1>, <underlying>, "Underlying.get").
assert !didCall(<proxy1>, <underlying>, "Underlying.put").
