/////////////////////////////////////////////////////////////////////////
//
// Â© University of Southampton IT Innovation Centre, 2011
//
// Copyright in this library belongs to the University of Southampton
// University Road, Highfield, Southampton, UK, SO17 1BJ
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
//	Created By :			Thomas Leonard
//	Created Date :			2011-12-02
//	Created for Project :		SERSCIS
//
/////////////////////////////////////////////////////////////////////////
//
//  License : GNU Lesser General Public License, version 2.1
//
/////////////////////////////////////////////////////////////////////////

declare sends(Ref a, int pos).
declare accepts(Ref a, int pos).

sends(<a>, 1).
sends(<b>, any(int)).
accepts(<c>, 1).
accepts(<d>, any(int)).

declare xfer(Ref a, Ref b, int pos).

xfer(?A, ?B, ?Pos) :-
    sends(?A, ?PosA),
    accepts(?B, ?PosB),
    MATCH_TO(?PosA, ?PosB, ?Pos).

declare foo(String c, Object x).
declare bar(String c, Object y).
declare match(String c, Object z).

foo("a", any(Object)).
bar("a", any(boolean)).

foo("b", any(boolean)).
bar("b", any(Object)).

foo("c", any(int)).
bar("c", any(int)).

foo("d", any(boolean)).
bar("d", true).
bar("d", "hi").

foo("e", any(Ref)).
bar("e", "x").
bar("e", <y>).

foo("f", any(Ref)).
bar("f", any(Object)).

match(?C, ?Z) :- foo(?C, ?X), bar(?C, ?Y), MATCH_TO(?X, ?Y, ?Z).

assert match("a", any(boolean)).
assert match("b", any(boolean)).
assert match("c", any(int)).

assert match("d", true).
assert !match("d", "hi").

assert match("e", <y>).
assert !match("e", "x").

assert match("f", any(Ref)).

declare value(String name, Object value).

value("a", ?X) :- ASSIGN("String", "hi", ?X).
value("a", ?X) :- ASSIGN("String", any(int), ?X).
value("a", ?X) :- ASSIGN("String", any(Value), ?X).
value("a", ?X) :- ASSIGN("String", 4, ?X).

assert value("a", "hi").
assert value("a", any(String)).
assert !value("a", any(Value)).
assert !value("a", any(int)).
assert !value("a", 4).
