/* vim: set syntax=prolog : */

/* Config */

initialObject("alice", "Unknown").
initialObject("bob", "Unknown").
initialObject("factory", "Factory").

field("alice", "ref", "factory").
field("bob", "ref", "factory").


initialInvocation("alice", "alice(any)").
initialInvocation("bob", "bob(any)").


/* Aggregation */

defaultInvocationObject("alice", "alice(any)").
defaultInvocationObject("bob", "bob(any)").
defaultInvocationObject("newTasksForAlice", "newTasksForAlice(any)").
defaultInvocationObject("newTasksForBob", "newTasksForBob(any)").
defaultInvocationObject("newTasks", "newTasks(any)").
defaultInvocationObject("factory", "factory(any)").

invocationObject("alice(any)", "factory", "factory(alice)").
invocationObject("newTasksForAlice(any)", "factory", "factory(alice)").

invocationObject("bob(any)", "factory", "factory(bob)").
invocationObject("newTasksForBob(any)", "factory", "factory(bob)").

newObject("factory(alice)", "Task", "newTasksForAlice").
newObject("factory(bob)", "Task", "newTasksForBob").
newObject("factory(any)", "Task", "newTasks").



/* Graphing */

//showInvocation(?Invocation) :- isInvocation(?Invocation).
//showInvocation(?Invocation) :- hasInvocation('factory', ?Invocation).
//showInvocation(?Invocation) :- hasInvocation('alice', ?Invocation).


/* Goals */

denyAccess('bob', 'newTasksForAlice').
requireAccess('alice', 'newTasksForAlice').

?- isA(?X, ?Y).
