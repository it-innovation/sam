/* vim: set syntax=prolog : */

/* Config */

initialObject("alice", "Unknown").
initialObject("bob", "Unknown").
initialObject("factory", "Factory").

field("alice", "ref", "factory").
field("bob", "ref", "factory").


hasInvocation("alice", "alice(start)").
hasInvocation("bob", "bob(start)").


/* Aggregation */

defaultInvocationObject("newTasksForAlice", "newTasksForAlice(any)").
defaultInvocationObject("newTasksForBob", "newTasksForBob(any)").
defaultInvocationObject("newTasks", "newTasks(any)").
defaultInvocationObject("factory", "factory(any)").

invocationObject("alice(start)", "factory", "factory(alice)").
invocationObject("newTasksForAlice(any)", "factory", "factory(alice)").

invocationObject("bob(start)", "factory", "factory(bob)").
invocationObject("newTasksForBob(any)", "factory", "factory(bob)").

newObject("factory(alice)", "Task", "newTasksForAlice").
newObject("factory(bob)", "Task", "newTasksForBob").
newObject("factory(any)", "Task", "newTasks").



/* Graphing */

/*
graphObjects(?Object, ?Target) :- isObject(?Object), field(?Object, ?Var, ?Target), ?Object != ?Target.
graphObjects(?Object, ?Target) :- isInvocation(?Caller), hasInvocation(?Object, ?Caller), local(?Caller, ?Var, ?Target), ?Object != ?Target.
graphObjects(?Invocation, ?Object) :- hasInvocation(?Object, ?Invocation).
graphInvocable(?Caller, ?TargetInvocation) :- didCall(?Caller, ?TargetInvocation, ?Arg, ?Result).
*/

graphObjects(?Object, ?Target) :- isObject(?Object), field(?Object, ?Var, ?Target), ?Object != ?Target.
graphObjects(?Object, ?Target) :- isInvocation(?Caller), hasInvocation(?Object, ?Caller), local(?Caller, ?Var, ?Target), ?Object != ?Target.


/* Goals */

error('newTasksForAlice accessible to Bob!', 1) :- value('bob', ?Var, 'newTasksForAlice').


?- isA(?X, ?Y).
