/* vim: set syntax=prolog : */

/* Imports */

import("initial", "sam:base.dl").
import("initial", "sam:graph.dl").
import("initial", "this:behaviour.dl").
import("final", "sam:system.dl").

/* Config */

initialObject("alice", "Unknown").
initialObject("bob", "Unknown").
initialObject("factory", "Factory").

field("alice", "ref", "factory").
field("bob", "ref", "factory").


initialInvocation("alice", "alice").
initialInvocation("bob", "bob").


/* Aggregation */

newObject("factory", "alice", "Task", "newTasksForAlice").
newObject("factory", "bob", "Task", "newTasksForBob").
newObject("factory", "any", "Task", "newTasks").



/* Graphing */

//showInvocation(?Object, ?Invocation) :- live(?Object, ?Invocation).


/* Goals */

denyAccess('bob', 'newTasksForAlice').
requireAccess('alice', 'newTasksForAlice').
